--- ./cdp/chrome-unstable_141.0.7354.0.protocol.json	2025-08-21 18:00:55.158635259 +0000
+++ ./cdp/chrome-unstable_141.0.7367.0.protocol.json	2025-08-21 18:05:08.533672010 +0000
@@ -2413,147 +2413,6 @@
       ]
     },
     {
-      "domain": "Extensions",
-      "description": "Defines commands and events for browser extensions.",
-      "experimental": true,
-      "types": [
-        {
-          "id": "StorageArea",
-          "description": "Storage areas.",
-          "type": "string",
-          "enum": [
-            "session",
-            "local",
-            "sync",
-            "managed"
-          ]
-        }
-      ],
-      "commands": [
-        {
-          "name": "loadUnpacked",
-          "description": "Installs an unpacked extension from the filesystem similar to\n--load-extension CLI flags. Returns extension ID once the extension\nhas been installed. Available if the client is connected using the\n--remote-debugging-pipe flag and the --enable-unsafe-extension-debugging\nflag is set.",
-          "parameters": [
-            {
-              "name": "path",
-              "description": "Absolute file path.",
-              "type": "string"
-            }
-          ],
-          "returns": [
-            {
-              "name": "id",
-              "description": "Extension id.",
-              "type": "string"
-            }
-          ]
-        },
-        {
-          "name": "uninstall",
-          "description": "Uninstalls an unpacked extension (others not supported) from the profile.\nAvailable if the client is connected using the --remote-debugging-pipe flag\nand the --enable-unsafe-extension-debugging.",
-          "parameters": [
-            {
-              "name": "id",
-              "description": "Extension id.",
-              "type": "string"
-            }
-          ]
-        },
-        {
-          "name": "getStorageItems",
-          "description": "Gets data from extension storage in the given `storageArea`. If `keys` is\nspecified, these are used to filter the result.",
-          "parameters": [
-            {
-              "name": "id",
-              "description": "ID of extension.",
-              "type": "string"
-            },
-            {
-              "name": "storageArea",
-              "description": "StorageArea to retrieve data from.",
-              "$ref": "StorageArea"
-            },
-            {
-              "name": "keys",
-              "description": "Keys to retrieve.",
-              "optional": true,
-              "type": "array",
-              "items": {
-                "type": "string"
-              }
-            }
-          ],
-          "returns": [
-            {
-              "name": "data",
-              "type": "object"
-            }
-          ]
-        },
-        {
-          "name": "removeStorageItems",
-          "description": "Removes `keys` from extension storage in the given `storageArea`.",
-          "parameters": [
-            {
-              "name": "id",
-              "description": "ID of extension.",
-              "type": "string"
-            },
-            {
-              "name": "storageArea",
-              "description": "StorageArea to remove data from.",
-              "$ref": "StorageArea"
-            },
-            {
-              "name": "keys",
-              "description": "Keys to remove.",
-              "type": "array",
-              "items": {
-                "type": "string"
-              }
-            }
-          ]
-        },
-        {
-          "name": "clearStorageItems",
-          "description": "Clears extension storage in the given `storageArea`.",
-          "parameters": [
-            {
-              "name": "id",
-              "description": "ID of extension.",
-              "type": "string"
-            },
-            {
-              "name": "storageArea",
-              "description": "StorageArea to remove data from.",
-              "$ref": "StorageArea"
-            }
-          ]
-        },
-        {
-          "name": "setStorageItems",
-          "description": "Sets `values` in extension storage in the given `storageArea`. The provided `values`\nwill be merged with existing values in the storage area.",
-          "parameters": [
-            {
-              "name": "id",
-              "description": "ID of extension.",
-              "type": "string"
-            },
-            {
-              "name": "storageArea",
-              "description": "StorageArea to set data in.",
-              "$ref": "StorageArea"
-            },
-            {
-              "name": "values",
-              "description": "Values to set.",
-              "type": "object"
-            }
-          ]
-        }
-      ]
-    },
-    {
       "domain": "Autofill",
       "description": "Defines commands and events for Autofill.",
       "experimental": true,
@@ -2928,6 +2787,487 @@
       ]
     },
     {
+      "domain": "BluetoothEmulation",
+      "description": "This domain allows configuring virtual Bluetooth devices to test\nthe web-bluetooth API.",
+      "experimental": true,
+      "types": [
+        {
+          "id": "CentralState",
+          "description": "Indicates the various states of Central.",
+          "type": "string",
+          "enum": [
+            "absent",
+            "powered-off",
+            "powered-on"
+          ]
+        },
+        {
+          "id": "GATTOperationType",
+          "description": "Indicates the various types of GATT event.",
+          "type": "string",
+          "enum": [
+            "connection",
+            "discovery"
+          ]
+        },
+        {
+          "id": "CharacteristicWriteType",
+          "description": "Indicates the various types of characteristic write.",
+          "type": "string",
+          "enum": [
+            "write-default-deprecated",
+            "write-with-response",
+            "write-without-response"
+          ]
+        },
+        {
+          "id": "CharacteristicOperationType",
+          "description": "Indicates the various types of characteristic operation.",
+          "type": "string",
+          "enum": [
+            "read",
+            "write",
+            "subscribe-to-notifications",
+            "unsubscribe-from-notifications"
+          ]
+        },
+        {
+          "id": "DescriptorOperationType",
+          "description": "Indicates the various types of descriptor operation.",
+          "type": "string",
+          "enum": [
+            "read",
+            "write"
+          ]
+        },
+        {
+          "id": "ManufacturerData",
+          "description": "Stores the manufacturer data",
+          "type": "object",
+          "properties": [
+            {
+              "name": "key",
+              "description": "Company identifier\nhttps://bitbucket.org/bluetooth-SIG/public/src/main/assigned_numbers/company_identifiers/company_identifiers.yaml\nhttps://usb.org/developers",
+              "type": "integer"
+            },
+            {
+              "name": "data",
+              "description": "Manufacturer-specific data",
+              "type": "binary"
+            }
+          ]
+        },
+        {
+          "id": "ScanRecord",
+          "description": "Stores the byte data of the advertisement packet sent by a Bluetooth device.",
+          "type": "object",
+          "properties": [
+            {
+              "name": "name",
+              "optional": true,
+              "type": "string"
+            },
+            {
+              "name": "uuids",
+              "optional": true,
+              "type": "array",
+              "items": {
+                "type": "string"
+              }
+            },
+            {
+              "name": "appearance",
+              "description": "Stores the external appearance description of the device.",
+              "optional": true,
+              "type": "integer"
+            },
+            {
+              "name": "txPower",
+              "description": "Stores the transmission power of a broadcasting device.",
+              "optional": true,
+              "type": "integer"
+            },
+            {
+              "name": "manufacturerData",
+              "description": "Key is the company identifier and the value is an array of bytes of\nmanufacturer specific data.",
+              "optional": true,
+              "type": "array",
+              "items": {
+                "$ref": "ManufacturerData"
+              }
+            }
+          ]
+        },
+        {
+          "id": "ScanEntry",
+          "description": "Stores the advertisement packet information that is sent by a Bluetooth device.",
+          "type": "object",
+          "properties": [
+            {
+              "name": "deviceAddress",
+              "type": "string"
+            },
+            {
+              "name": "rssi",
+              "type": "integer"
+            },
+            {
+              "name": "scanRecord",
+              "$ref": "ScanRecord"
+            }
+          ]
+        },
+        {
+          "id": "CharacteristicProperties",
+          "description": "Describes the properties of a characteristic. This follows Bluetooth Core\nSpecification BT 4.2 Vol 3 Part G 3.3.1. Characteristic Properties.",
+          "type": "object",
+          "properties": [
+            {
+              "name": "broadcast",
+              "optional": true,
+              "type": "boolean"
+            },
+            {
+              "name": "read",
+              "optional": true,
+              "type": "boolean"
+            },
+            {
+              "name": "writeWithoutResponse",
+              "optional": true,
+              "type": "boolean"
+            },
+            {
+              "name": "write",
+              "optional": true,
+              "type": "boolean"
+            },
+            {
+              "name": "notify",
+              "optional": true,
+              "type": "boolean"
+            },
+            {
+              "name": "indicate",
+              "optional": true,
+              "type": "boolean"
+            },
+            {
+              "name": "authenticatedSignedWrites",
+              "optional": true,
+              "type": "boolean"
+            },
+            {
+              "name": "extendedProperties",
+              "optional": true,
+              "type": "boolean"
+            }
+          ]
+        }
+      ],
+      "commands": [
+        {
+          "name": "enable",
+          "description": "Enable the BluetoothEmulation domain.",
+          "parameters": [
+            {
+              "name": "state",
+              "description": "State of the simulated central.",
+              "$ref": "CentralState"
+            },
+            {
+              "name": "leSupported",
+              "description": "If the simulated central supports low-energy.",
+              "type": "boolean"
+            }
+          ]
+        },
+        {
+          "name": "setSimulatedCentralState",
+          "description": "Set the state of the simulated central.",
+          "parameters": [
+            {
+              "name": "state",
+              "description": "State of the simulated central.",
+              "$ref": "CentralState"
+            }
+          ]
+        },
+        {
+          "name": "disable",
+          "description": "Disable the BluetoothEmulation domain."
+        },
+        {
+          "name": "simulatePreconnectedPeripheral",
+          "description": "Simulates a peripheral with |address|, |name| and |knownServiceUuids|\nthat has already been connected to the system.",
+          "parameters": [
+            {
+              "name": "address",
+              "type": "string"
+            },
+            {
+              "name": "name",
+              "type": "string"
+            },
+            {
+              "name": "manufacturerData",
+              "type": "array",
+              "items": {
+                "$ref": "ManufacturerData"
+              }
+            },
+            {
+              "name": "knownServiceUuids",
+              "type": "array",
+              "items": {
+                "type": "string"
+              }
+            }
+          ]
+        },
+        {
+          "name": "simulateAdvertisement",
+          "description": "Simulates an advertisement packet described in |entry| being received by\nthe central.",
+          "parameters": [
+            {
+              "name": "entry",
+              "$ref": "ScanEntry"
+            }
+          ]
+        },
+        {
+          "name": "simulateGATTOperationResponse",
+          "description": "Simulates the response code from the peripheral with |address| for a\nGATT operation of |type|. The |code| value follows the HCI Error Codes from\nBluetooth Core Specification Vol 2 Part D 1.3 List Of Error Codes.",
+          "parameters": [
+            {
+              "name": "address",
+              "type": "string"
+            },
+            {
+              "name": "type",
+              "$ref": "GATTOperationType"
+            },
+            {
+              "name": "code",
+              "type": "integer"
+            }
+          ]
+        },
+        {
+          "name": "simulateCharacteristicOperationResponse",
+          "description": "Simulates the response from the characteristic with |characteristicId| for a\ncharacteristic operation of |type|. The |code| value follows the Error\nCodes from Bluetooth Core Specification Vol 3 Part F 3.4.1.1 Error Response.\nThe |data| is expected to exist when simulating a successful read operation\nresponse.",
+          "parameters": [
+            {
+              "name": "characteristicId",
+              "type": "string"
+            },
+            {
+              "name": "type",
+              "$ref": "CharacteristicOperationType"
+            },
+            {
+              "name": "code",
+              "type": "integer"
+            },
+            {
+              "name": "data",
+              "optional": true,
+              "type": "binary"
+            }
+          ]
+        },
+        {
+          "name": "simulateDescriptorOperationResponse",
+          "description": "Simulates the response from the descriptor with |descriptorId| for a\ndescriptor operation of |type|. The |code| value follows the Error\nCodes from Bluetooth Core Specification Vol 3 Part F 3.4.1.1 Error Response.\nThe |data| is expected to exist when simulating a successful read operation\nresponse.",
+          "parameters": [
+            {
+              "name": "descriptorId",
+              "type": "string"
+            },
+            {
+              "name": "type",
+              "$ref": "DescriptorOperationType"
+            },
+            {
+              "name": "code",
+              "type": "integer"
+            },
+            {
+              "name": "data",
+              "optional": true,
+              "type": "binary"
+            }
+          ]
+        },
+        {
+          "name": "addService",
+          "description": "Adds a service with |serviceUuid| to the peripheral with |address|.",
+          "parameters": [
+            {
+              "name": "address",
+              "type": "string"
+            },
+            {
+              "name": "serviceUuid",
+              "type": "string"
+            }
+          ],
+          "returns": [
+            {
+              "name": "serviceId",
+              "description": "An identifier that uniquely represents this service.",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "name": "removeService",
+          "description": "Removes the service respresented by |serviceId| from the simulated central.",
+          "parameters": [
+            {
+              "name": "serviceId",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "name": "addCharacteristic",
+          "description": "Adds a characteristic with |characteristicUuid| and |properties| to the\nservice represented by |serviceId|.",
+          "parameters": [
+            {
+              "name": "serviceId",
+              "type": "string"
+            },
+            {
+              "name": "characteristicUuid",
+              "type": "string"
+            },
+            {
+              "name": "properties",
+              "$ref": "CharacteristicProperties"
+            }
+          ],
+          "returns": [
+            {
+              "name": "characteristicId",
+              "description": "An identifier that uniquely represents this characteristic.",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "name": "removeCharacteristic",
+          "description": "Removes the characteristic respresented by |characteristicId| from the\nsimulated central.",
+          "parameters": [
+            {
+              "name": "characteristicId",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "name": "addDescriptor",
+          "description": "Adds a descriptor with |descriptorUuid| to the characteristic respresented\nby |characteristicId|.",
+          "parameters": [
+            {
+              "name": "characteristicId",
+              "type": "string"
+            },
+            {
+              "name": "descriptorUuid",
+              "type": "string"
+            }
+          ],
+          "returns": [
+            {
+              "name": "descriptorId",
+              "description": "An identifier that uniquely represents this descriptor.",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "name": "removeDescriptor",
+          "description": "Removes the descriptor with |descriptorId| from the simulated central.",
+          "parameters": [
+            {
+              "name": "descriptorId",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "name": "simulateGATTDisconnection",
+          "description": "Simulates a GATT disconnection from the peripheral with |address|.",
+          "parameters": [
+            {
+              "name": "address",
+              "type": "string"
+            }
+          ]
+        }
+      ],
+      "events": [
+        {
+          "name": "gattOperationReceived",
+          "description": "Event for when a GATT operation of |type| to the peripheral with |address|\nhappened.",
+          "parameters": [
+            {
+              "name": "address",
+              "type": "string"
+            },
+            {
+              "name": "type",
+              "$ref": "GATTOperationType"
+            }
+          ]
+        },
+        {
+          "name": "characteristicOperationReceived",
+          "description": "Event for when a characteristic operation of |type| to the characteristic\nrespresented by |characteristicId| happened. |data| and |writeType| is\nexpected to exist when |type| is write.",
+          "parameters": [
+            {
+              "name": "characteristicId",
+              "type": "string"
+            },
+            {
+              "name": "type",
+              "$ref": "CharacteristicOperationType"
+            },
+            {
+              "name": "data",
+              "optional": true,
+              "type": "binary"
+            },
+            {
+              "name": "writeType",
+              "optional": true,
+              "$ref": "CharacteristicWriteType"
+            }
+          ]
+        },
+        {
+          "name": "descriptorOperationReceived",
+          "description": "Event for when a descriptor operation of |type| to the descriptor\nrespresented by |descriptorId| happened. |data| is expected to exist when\n|type| is write.",
+          "parameters": [
+            {
+              "name": "descriptorId",
+              "type": "string"
+            },
+            {
+              "name": "type",
+              "$ref": "DescriptorOperationType"
+            },
+            {
+              "name": "data",
+              "optional": true,
+              "type": "binary"
+            }
+          ]
+        }
+      ]
+    },
+    {
       "domain": "Browser",
       "description": "The Browser domain defines methods and events for browser managing.",
       "types": [
@@ -8497,39 +8837,6 @@
       ]
     },
     {
-      "domain": "EventBreakpoints",
-      "description": "EventBreakpoints permits setting JavaScript breakpoints on operations and events\noccurring in native code invoked from JavaScript. Once breakpoint is hit, it is\nreported through Debugger domain, similarly to regular breakpoints being hit.",
-      "experimental": true,
-      "commands": [
-        {
-          "name": "setInstrumentationBreakpoint",
-          "description": "Sets breakpoint on particular native event.",
-          "parameters": [
-            {
-              "name": "eventName",
-              "description": "Instrumentation name to stop on.",
-              "type": "string"
-            }
-          ]
-        },
-        {
-          "name": "removeInstrumentationBreakpoint",
-          "description": "Removes breakpoint on particular native event.",
-          "parameters": [
-            {
-              "name": "eventName",
-              "description": "Instrumentation name to stop on.",
-              "type": "string"
-            }
-          ]
-        },
-        {
-          "name": "disable",
-          "description": "Removes all breakpoints"
-        }
-      ]
-    },
-    {
       "domain": "DOMSnapshot",
       "description": "This domain facilitates obtaining document snapshots with DOM, layout, and style information.",
       "experimental": true,
@@ -9554,6 +9861,91 @@
       ]
     },
     {
+      "domain": "DeviceAccess",
+      "experimental": true,
+      "types": [
+        {
+          "id": "RequestId",
+          "description": "Device request id.",
+          "type": "string"
+        },
+        {
+          "id": "DeviceId",
+          "description": "A device id.",
+          "type": "string"
+        },
+        {
+          "id": "PromptDevice",
+          "description": "Device information displayed in a user prompt to select a device.",
+          "type": "object",
+          "properties": [
+            {
+              "name": "id",
+              "$ref": "DeviceId"
+            },
+            {
+              "name": "name",
+              "description": "Display name as it appears in a device request user prompt.",
+              "type": "string"
+            }
+          ]
+        }
+      ],
+      "commands": [
+        {
+          "name": "enable",
+          "description": "Enable events in this domain."
+        },
+        {
+          "name": "disable",
+          "description": "Disable events in this domain."
+        },
+        {
+          "name": "selectPrompt",
+          "description": "Select a device in response to a DeviceAccess.deviceRequestPrompted event.",
+          "parameters": [
+            {
+              "name": "id",
+              "$ref": "RequestId"
+            },
+            {
+              "name": "deviceId",
+              "$ref": "DeviceId"
+            }
+          ]
+        },
+        {
+          "name": "cancelPrompt",
+          "description": "Cancel a prompt in response to a DeviceAccess.deviceRequestPrompted event.",
+          "parameters": [
+            {
+              "name": "id",
+              "$ref": "RequestId"
+            }
+          ]
+        }
+      ],
+      "events": [
+        {
+          "name": "deviceRequestPrompted",
+          "description": "A device request opened a user prompt to select a device. Respond with the\nselectPrompt or cancelPrompt command.",
+          "parameters": [
+            {
+              "name": "id",
+              "$ref": "RequestId"
+            },
+            {
+              "name": "devices",
+              "type": "array",
+              "items": {
+                "$ref": "PromptDevice"
+              }
+            }
+          ]
+        }
+      ]
+    },
+    {
       "domain": "DeviceOrientation",
       "experimental": true,
       "commands": [
@@ -9968,6 +10360,130 @@
           ]
         },
         {
+          "id": "WorkAreaInsets",
+          "experimental": true,
+          "type": "object",
+          "properties": [
+            {
+              "name": "top",
+              "description": "Work area top inset in pixels. Default is 0;",
+              "optional": true,
+              "type": "integer"
+            },
+            {
+              "name": "left",
+              "description": "Work area left inset in pixels. Default is 0;",
+              "optional": true,
+              "type": "integer"
+            },
+            {
+              "name": "bottom",
+              "description": "Work area bottom inset in pixels. Default is 0;",
+              "optional": true,
+              "type": "integer"
+            },
+            {
+              "name": "right",
+              "description": "Work area right inset in pixels. Default is 0;",
+              "optional": true,
+              "type": "integer"
+            }
+          ]
+        },
+        {
+          "id": "ScreenId",
+          "experimental": true,
+          "type": "string"
+        },
+        {
+          "id": "ScreenInfo",
+          "description": "Screen information similar to the one returned by window.getScreenDetails() method,\nsee https://w3c.github.io/window-management/#screendetailed.",
+          "experimental": true,
+          "type": "object",
+          "properties": [
+            {
+              "name": "left",
+              "description": "Offset of the left edge of the screen.",
+              "type": "integer"
+            },
+            {
+              "name": "top",
+              "description": "Offset of the top edge of the screen.",
+              "type": "integer"
+            },
+            {
+              "name": "width",
+              "description": "Width of the screen.",
+              "type": "integer"
+            },
+            {
+              "name": "height",
+              "description": "Height of the screen.",
+              "type": "integer"
+            },
+            {
+              "name": "availLeft",
+              "description": "Offset of the left edge of the available screen area.",
+              "type": "integer"
+            },
+            {
+              "name": "availTop",
+              "description": "Offset of the top edge of the available screen area.",
+              "type": "integer"
+            },
+            {
+              "name": "availWidth",
+              "description": "Width of the available screen area.",
+              "type": "integer"
+            },
+            {
+              "name": "availHeight",
+              "description": "Height of the available screen area.",
+              "type": "integer"
+            },
+            {
+              "name": "devicePixelRatio",
+              "description": "Specifies the screen's device pixel ratio.",
+              "type": "number"
+            },
+            {
+              "name": "orientation",
+              "description": "Specifies the screen's orientation.",
+              "$ref": "ScreenOrientation"
+            },
+            {
+              "name": "colorDepth",
+              "description": "Specifies the screen's color depth in bits.",
+              "type": "integer"
+            },
+            {
+              "name": "isExtended",
+              "description": "Indicates whether the device has multiple screens.",
+              "type": "boolean"
+            },
+            {
+              "name": "isInternal",
+              "description": "Indicates whether the screen is internal to the device or external, attached to the device.",
+              "type": "boolean"
+            },
+            {
+              "name": "isPrimary",
+              "description": "Indicates whether the screen is set as the the operating system primary screen.",
+              "type": "boolean"
+            },
+            {
+              "name": "label",
+              "description": "Specifies the descriptive label for the screen.",
+              "type": "string"
+            },
+            {
+              "name": "id",
+              "description": "Specifies the unique identifier of the screen.",
+              "$ref": "ScreenId"
+            }
+          ]
+        },
+        {
           "id": "DisabledImageType",
           "description": "Enum of image types that can be disabled.",
           "experimental": true,
@@ -10686,6 +11202,100 @@
               "type": "integer"
             }
           ]
+        },
+        {
+          "name": "getScreenInfos",
+          "description": "Returns device's screen configuration.",
+          "experimental": true,
+          "returns": [
+            {
+              "name": "screenInfos",
+              "type": "array",
+              "items": {
+                "$ref": "ScreenInfo"
+              }
+            }
+          ]
+        },
+        {
+          "name": "addScreen",
+          "description": "Add a new screen to the device. Only supported in headless mode.",
+          "experimental": true,
+          "parameters": [
+            {
+              "name": "left",
+              "description": "Offset of the left edge of the screen in pixels.",
+              "type": "integer"
+            },
+            {
+              "name": "top",
+              "description": "Offset of the top edge of the screen in pixels.",
+              "type": "integer"
+            },
+            {
+              "name": "width",
+              "description": "The width of the screen in pixels.",
+              "type": "integer"
+            },
+            {
+              "name": "height",
+              "description": "The height of the screen in pixels.",
+              "type": "integer"
+            },
+            {
+              "name": "workAreaInsets",
+              "description": "Specifies the screen's work area. Default is entire screen.",
+              "optional": true,
+              "$ref": "WorkAreaInsets"
+            },
+            {
+              "name": "devicePixelRatio",
+              "description": "Specifies the screen's device pixel ratio. Default is 1.",
+              "optional": true,
+              "type": "number"
+            },
+            {
+              "name": "rotation",
+              "description": "Specifies the screen's rotation angle. Available values are 0, 90, 180 and 270. Default is 0.",
+              "optional": true,
+              "type": "integer"
+            },
+            {
+              "name": "colorDepth",
+              "description": "Specifies the screen's color depth in bits. Default is 24.",
+              "optional": true,
+              "type": "integer"
+            },
+            {
+              "name": "label",
+              "description": "Specifies the descriptive label for the screen. Default is none.",
+              "optional": true,
+              "type": "string"
+            },
+            {
+              "name": "isInternal",
+              "description": "Indicates whether the screen is internal to the device or external, attached to the device. Default is false.",
+              "optional": true,
+              "type": "boolean"
+            }
+          ],
+          "returns": [
+            {
+              "name": "screenInfo",
+              "$ref": "ScreenInfo"
+            }
+          ]
+        },
+        {
+          "name": "removeScreen",
+          "description": "Remove screen from the device. Only supported in headless mode.",
+          "experimental": true,
+          "parameters": [
+            {
+              "name": "screenId",
+              "$ref": "ScreenId"
+            }
+          ]
         }
       ],
       "events": [
@@ -10697,179 +11307,838 @@
       ]
     },
     {
-      "domain": "HeadlessExperimental",
-      "description": "This domain provides experimental commands only supported in headless mode.",
+      "domain": "EventBreakpoints",
+      "description": "EventBreakpoints permits setting JavaScript breakpoints on operations and events\noccurring in native code invoked from JavaScript. Once breakpoint is hit, it is\nreported through Debugger domain, similarly to regular breakpoints being hit.",
       "experimental": true,
-      "dependencies": [
-        "Page",
-        "Runtime"
+      "commands": [
+        {
+          "name": "setInstrumentationBreakpoint",
+          "description": "Sets breakpoint on particular native event.",
+          "parameters": [
+            {
+              "name": "eventName",
+              "description": "Instrumentation name to stop on.",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "name": "removeInstrumentationBreakpoint",
+          "description": "Removes breakpoint on particular native event.",
+          "parameters": [
+            {
+              "name": "eventName",
+              "description": "Instrumentation name to stop on.",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "name": "disable",
+          "description": "Removes all breakpoints"
+        }
+      ]
+    },
+    {
+      "domain": "Extensions",
+      "description": "Defines commands and events for browser extensions.",
+      "experimental": true,
+      "types": [
+        {
+          "id": "StorageArea",
+          "description": "Storage areas.",
+          "type": "string",
+          "enum": [
+            "session",
+            "local",
+            "sync",
+            "managed"
+          ]
+        }
       ],
+      "commands": [
+        {
+          "name": "loadUnpacked",
+          "description": "Installs an unpacked extension from the filesystem similar to\n--load-extension CLI flags. Returns extension ID once the extension\nhas been installed. Available if the client is connected using the\n--remote-debugging-pipe flag and the --enable-unsafe-extension-debugging\nflag is set.",
+          "parameters": [
+            {
+              "name": "path",
+              "description": "Absolute file path.",
+              "type": "string"
+            }
+          ],
+          "returns": [
+            {
+              "name": "id",
+              "description": "Extension id.",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "name": "uninstall",
+          "description": "Uninstalls an unpacked extension (others not supported) from the profile.\nAvailable if the client is connected using the --remote-debugging-pipe flag\nand the --enable-unsafe-extension-debugging.",
+          "parameters": [
+            {
+              "name": "id",
+              "description": "Extension id.",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "name": "getStorageItems",
+          "description": "Gets data from extension storage in the given `storageArea`. If `keys` is\nspecified, these are used to filter the result.",
+          "parameters": [
+            {
+              "name": "id",
+              "description": "ID of extension.",
+              "type": "string"
+            },
+            {
+              "name": "storageArea",
+              "description": "StorageArea to retrieve data from.",
+              "$ref": "StorageArea"
+            },
+            {
+              "name": "keys",
+              "description": "Keys to retrieve.",
+              "optional": true,
+              "type": "array",
+              "items": {
+                "type": "string"
+              }
+            }
+          ],
+          "returns": [
+            {
+              "name": "data",
+              "type": "object"
+            }
+          ]
+        },
+        {
+          "name": "removeStorageItems",
+          "description": "Removes `keys` from extension storage in the given `storageArea`.",
+          "parameters": [
+            {
+              "name": "id",
+              "description": "ID of extension.",
+              "type": "string"
+            },
+            {
+              "name": "storageArea",
+              "description": "StorageArea to remove data from.",
+              "$ref": "StorageArea"
+            },
+            {
+              "name": "keys",
+              "description": "Keys to remove.",
+              "type": "array",
+              "items": {
+                "type": "string"
+              }
+            }
+          ]
+        },
+        {
+          "name": "clearStorageItems",
+          "description": "Clears extension storage in the given `storageArea`.",
+          "parameters": [
+            {
+              "name": "id",
+              "description": "ID of extension.",
+              "type": "string"
+            },
+            {
+              "name": "storageArea",
+              "description": "StorageArea to remove data from.",
+              "$ref": "StorageArea"
+            }
+          ]
+        },
+        {
+          "name": "setStorageItems",
+          "description": "Sets `values` in extension storage in the given `storageArea`. The provided `values`\nwill be merged with existing values in the storage area.",
+          "parameters": [
+            {
+              "name": "id",
+              "description": "ID of extension.",
+              "type": "string"
+            },
+            {
+              "name": "storageArea",
+              "description": "StorageArea to set data in.",
+              "$ref": "StorageArea"
+            },
+            {
+              "name": "values",
+              "description": "Values to set.",
+              "type": "object"
+            }
+          ]
+        }
+      ]
+    },
+    {
+      "domain": "FedCm",
+      "description": "This domain allows interacting with the FedCM dialog.",
+      "experimental": true,
       "types": [
         {
-          "id": "ScreenshotParams",
-          "description": "Encoding options for a screenshot.",
+          "id": "LoginState",
+          "description": "Whether this is a sign-up or sign-in action for this account, i.e.\nwhether this account has ever been used to sign in to this RP before.",
+          "type": "string",
+          "enum": [
+            "SignIn",
+            "SignUp"
+          ]
+        },
+        {
+          "id": "DialogType",
+          "description": "The types of FedCM dialogs.",
+          "type": "string",
+          "enum": [
+            "AccountChooser",
+            "AutoReauthn",
+            "ConfirmIdpLogin",
+            "Error"
+          ]
+        },
+        {
+          "id": "DialogButton",
+          "description": "The buttons on the FedCM dialog.",
+          "type": "string",
+          "enum": [
+            "ConfirmIdpLoginContinue",
+            "ErrorGotIt",
+            "ErrorMoreDetails"
+          ]
+        },
+        {
+          "id": "AccountUrlType",
+          "description": "The URLs that each account has",
+          "type": "string",
+          "enum": [
+            "TermsOfService",
+            "PrivacyPolicy"
+          ]
+        },
+        {
+          "id": "Account",
+          "description": "Corresponds to IdentityRequestAccount",
           "type": "object",
           "properties": [
             {
-              "name": "format",
-              "description": "Image compression format (defaults to png).",
-              "optional": true,
-              "type": "string",
-              "enum": [
-                "jpeg",
-                "png",
-                "webp"
-              ]
+              "name": "accountId",
+              "type": "string"
             },
             {
-              "name": "quality",
-              "description": "Compression quality from range [0..100] (jpeg and webp only).",
+              "name": "email",
+              "type": "string"
+            },
+            {
+              "name": "name",
+              "type": "string"
+            },
+            {
+              "name": "givenName",
+              "type": "string"
+            },
+            {
+              "name": "pictureUrl",
+              "type": "string"
+            },
+            {
+              "name": "idpConfigUrl",
+              "type": "string"
+            },
+            {
+              "name": "idpLoginUrl",
+              "type": "string"
+            },
+            {
+              "name": "loginState",
+              "$ref": "LoginState"
+            },
+            {
+              "name": "termsOfServiceUrl",
+              "description": "These two are only set if the loginState is signUp",
               "optional": true,
-              "type": "integer"
+              "type": "string"
             },
             {
-              "name": "optimizeForSpeed",
-              "description": "Optimize image encoding for speed, not for resulting size (defaults to false)",
+              "name": "privacyPolicyUrl",
               "optional": true,
-              "type": "boolean"
+              "type": "string"
             }
           ]
         }
       ],
-      "commands": [
+      "events": [
         {
-          "name": "beginFrame",
-          "description": "Sends a BeginFrame to the target and returns when the frame was completed. Optionally captures a\nscreenshot from the resulting frame. Requires that the target was created with enabled\nBeginFrameControl. Designed for use with --run-all-compositor-stages-before-draw, see also\nhttps://goo.gle/chrome-headless-rendering for more background.",
+          "name": "dialogShown",
           "parameters": [
             {
-              "name": "frameTimeTicks",
-              "description": "Timestamp of this BeginFrame in Renderer TimeTicks (milliseconds of uptime). If not set,\nthe current time will be used.",
-              "optional": true,
-              "type": "number"
+              "name": "dialogId",
+              "type": "string"
             },
             {
-              "name": "interval",
-              "description": "The interval between BeginFrames that is reported to the compositor, in milliseconds.\nDefaults to a 60 frames/second interval, i.e. about 16.666 milliseconds.",
-              "optional": true,
-              "type": "number"
+              "name": "dialogType",
+              "$ref": "DialogType"
             },
             {
-              "name": "noDisplayUpdates",
-              "description": "Whether updates should not be committed and drawn onto the display. False by default. If\ntrue, only side effects of the BeginFrame will be run, such as layout and animations, but\nany visual updates may not be visible on the display or in screenshots.",
-              "optional": true,
-              "type": "boolean"
+              "name": "accounts",
+              "type": "array",
+              "items": {
+                "$ref": "Account"
+              }
             },
             {
-              "name": "screenshot",
-              "description": "If set, a screenshot of the frame will be captured and returned in the response. Otherwise,\nno screenshot will be captured. Note that capturing a screenshot can fail, for example,\nduring renderer initialization. In such a case, no screenshot data will be returned.",
+              "name": "title",
+              "description": "These exist primarily so that the caller can verify the\nRP context was used appropriately.",
+              "type": "string"
+            },
+            {
+              "name": "subtitle",
               "optional": true,
-              "$ref": "ScreenshotParams"
+              "type": "string"
             }
-          ],
-          "returns": [
+          ]
+        },
+        {
+          "name": "dialogClosed",
+          "description": "Triggered when a dialog is closed, either by user action, JS abort,\nor a command below.",
+          "parameters": [
             {
-              "name": "hasDamage",
-              "description": "Whether the BeginFrame resulted in damage and, thus, a new frame was committed to the\ndisplay. Reported for diagnostic uses, may be removed in the future.",
+              "name": "dialogId",
+              "type": "string"
+            }
+          ]
+        }
+      ],
+      "commands": [
+        {
+          "name": "enable",
+          "parameters": [
+            {
+              "name": "disableRejectionDelay",
+              "description": "Allows callers to disable the promise rejection delay that would\nnormally happen, if this is unimportant to what's being tested.\n(step 4 of https://fedidcg.github.io/FedCM/#browser-api-rp-sign-in)",
+              "optional": true,
               "type": "boolean"
+            }
+          ]
+        },
+        {
+          "name": "disable"
+        },
+        {
+          "name": "selectAccount",
+          "parameters": [
+            {
+              "name": "dialogId",
+              "type": "string"
             },
             {
-              "name": "screenshotData",
-              "description": "Base64-encoded image data of the screenshot, if one was requested and successfully taken.",
-              "optional": true,
-              "type": "binary"
+              "name": "accountIndex",
+              "type": "integer"
             }
           ]
         },
         {
-          "name": "disable",
-          "description": "Disables headless events for the target.",
-          "deprecated": true
+          "name": "clickDialogButton",
+          "parameters": [
+            {
+              "name": "dialogId",
+              "type": "string"
+            },
+            {
+              "name": "dialogButton",
+              "$ref": "DialogButton"
+            }
+          ]
         },
         {
-          "name": "enable",
-          "description": "Enables headless events for the target.",
-          "deprecated": true
+          "name": "openUrl",
+          "parameters": [
+            {
+              "name": "dialogId",
+              "type": "string"
+            },
+            {
+              "name": "accountIndex",
+              "type": "integer"
+            },
+            {
+              "name": "accountUrlType",
+              "$ref": "AccountUrlType"
+            }
+          ]
+        },
+        {
+          "name": "dismissDialog",
+          "parameters": [
+            {
+              "name": "dialogId",
+              "type": "string"
+            },
+            {
+              "name": "triggerCooldown",
+              "optional": true,
+              "type": "boolean"
+            }
+          ]
+        },
+        {
+          "name": "resetCooldown",
+          "description": "Resets the cooldown time, if any, to allow the next FedCM call to show\na dialog even if one was recently dismissed by the user."
         }
       ]
     },
     {
-      "domain": "IO",
-      "description": "Input/Output operations for streams produced by DevTools.",
+      "domain": "Fetch",
+      "description": "A domain for letting clients substitute browser's network layer with client code.",
+      "dependencies": [
+        "Network",
+        "IO",
+        "Page"
+      ],
       "types": [
         {
-          "id": "StreamHandle",
-          "description": "This is either obtained from another method or specified as `blob:<uuid>` where\n`<uuid>` is an UUID of a Blob.",
+          "id": "RequestId",
+          "description": "Unique request identifier.\nNote that this does not identify individual HTTP requests that are part of\na network request.",
           "type": "string"
+        },
+        {
+          "id": "RequestStage",
+          "description": "Stages of the request to handle. Request will intercept before the request is\nsent. Response will intercept after the response is received (but before response\nbody is received).",
+          "type": "string",
+          "enum": [
+            "Request",
+            "Response"
+          ]
+        },
+        {
+          "id": "RequestPattern",
+          "type": "object",
+          "properties": [
+            {
+              "name": "urlPattern",
+              "description": "Wildcards (`'*'` -> zero or more, `'?'` -> exactly one) are allowed. Escape character is\nbackslash. Omitting is equivalent to `\"*\"`.",
+              "optional": true,
+              "type": "string"
+            },
+            {
+              "name": "resourceType",
+              "description": "If set, only requests for matching resource types will be intercepted.",
+              "optional": true,
+              "$ref": "Network.ResourceType"
+            },
+            {
+              "name": "requestStage",
+              "description": "Stage at which to begin intercepting requests. Default is Request.",
+              "optional": true,
+              "$ref": "RequestStage"
+            }
+          ]
+        },
+        {
+          "id": "HeaderEntry",
+          "description": "Response HTTP header entry",
+          "type": "object",
+          "properties": [
+            {
+              "name": "name",
+              "type": "string"
+            },
+            {
+              "name": "value",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "id": "AuthChallenge",
+          "description": "Authorization challenge for HTTP status code 401 or 407.",
+          "type": "object",
+          "properties": [
+            {
+              "name": "source",
+              "description": "Source of the authentication challenge.",
+              "optional": true,
+              "type": "string",
+              "enum": [
+                "Server",
+                "Proxy"
+              ]
+            },
+            {
+              "name": "origin",
+              "description": "Origin of the challenger.",
+              "type": "string"
+            },
+            {
+              "name": "scheme",
+              "description": "The authentication scheme used, such as basic or digest",
+              "type": "string"
+            },
+            {
+              "name": "realm",
+              "description": "The realm of the challenge. May be empty.",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "id": "AuthChallengeResponse",
+          "description": "Response to an AuthChallenge.",
+          "type": "object",
+          "properties": [
+            {
+              "name": "response",
+              "description": "The decision on what to do in response to the authorization challenge.  Default means\ndeferring to the default behavior of the net stack, which will likely either the Cancel\nauthentication or display a popup dialog box.",
+              "type": "string",
+              "enum": [
+                "Default",
+                "CancelAuth",
+                "ProvideCredentials"
+              ]
+            },
+            {
+              "name": "username",
+              "description": "The username to provide, possibly empty. Should only be set if response is\nProvideCredentials.",
+              "optional": true,
+              "type": "string"
+            },
+            {
+              "name": "password",
+              "description": "The password to provide, possibly empty. Should only be set if response is\nProvideCredentials.",
+              "optional": true,
+              "type": "string"
+            }
+          ]
         }
       ],
       "commands": [
         {
-          "name": "close",
-          "description": "Close the stream, discard any temporary backing storage.",
+          "name": "disable",
+          "description": "Disables the fetch domain."
+        },
+        {
+          "name": "enable",
+          "description": "Enables issuing of requestPaused events. A request will be paused until client\ncalls one of failRequest, fulfillRequest or continueRequest/continueWithAuth.",
           "parameters": [
             {
-              "name": "handle",
-              "description": "Handle of the stream to close.",
-              "$ref": "StreamHandle"
+              "name": "patterns",
+              "description": "If specified, only requests matching any of these patterns will produce\nfetchRequested event and will be paused until clients response. If not set,\nall requests will be affected.",
+              "optional": true,
+              "type": "array",
+              "items": {
+                "$ref": "RequestPattern"
+              }
+            },
+            {
+              "name": "handleAuthRequests",
+              "description": "If true, authRequired events will be issued and requests will be paused\nexpecting a call to continueWithAuth.",
+              "optional": true,
+              "type": "boolean"
             }
           ]
         },
         {
-          "name": "read",
-          "description": "Read a chunk of the stream",
+          "name": "failRequest",
+          "description": "Causes the request to fail with specified reason.",
           "parameters": [
             {
-              "name": "handle",
-              "description": "Handle of the stream to read.",
-              "$ref": "StreamHandle"
+              "name": "requestId",
+              "description": "An id the client received in requestPaused event.",
+              "$ref": "RequestId"
             },
             {
-              "name": "offset",
-              "description": "Seek to the specified offset before reading (if not specified, proceed with offset\nfollowing the last read). Some types of streams may only support sequential reads.",
-              "optional": true,
+              "name": "errorReason",
+              "description": "Causes the request to fail with the given reason.",
+              "$ref": "Network.ErrorReason"
+            }
+          ]
+        },
+        {
+          "name": "fulfillRequest",
+          "description": "Provides response to the request.",
+          "parameters": [
+            {
+              "name": "requestId",
+              "description": "An id the client received in requestPaused event.",
+              "$ref": "RequestId"
+            },
+            {
+              "name": "responseCode",
+              "description": "An HTTP response code.",
               "type": "integer"
             },
             {
-              "name": "size",
-              "description": "Maximum number of bytes to read (left upon the agent discretion if not specified).",
+              "name": "responseHeaders",
+              "description": "Response headers.",
               "optional": true,
-              "type": "integer"
+              "type": "array",
+              "items": {
+                "$ref": "HeaderEntry"
+              }
+            },
+            {
+              "name": "binaryResponseHeaders",
+              "description": "Alternative way of specifying response headers as a \\0-separated\nseries of name: value pairs. Prefer the above method unless you\nneed to represent some non-UTF8 values that can't be transmitted\nover the protocol as text.",
+              "optional": true,
+              "type": "binary"
+            },
+            {
+              "name": "body",
+              "description": "A response body. If absent, original response body will be used if\nthe request is intercepted at the response stage and empty body\nwill be used if the request is intercepted at the request stage.",
+              "optional": true,
+              "type": "binary"
+            },
+            {
+              "name": "responsePhrase",
+              "description": "A textual representation of responseCode.\nIf absent, a standard phrase matching responseCode is used.",
+              "optional": true,
+              "type": "string"
             }
-          ],
-          "returns": [
+          ]
+        },
+        {
+          "name": "continueRequest",
+          "description": "Continues the request, optionally modifying some of its parameters.",
+          "parameters": [
             {
-              "name": "base64Encoded",
-              "description": "Set if the data is base64-encoded",
+              "name": "requestId",
+              "description": "An id the client received in requestPaused event.",
+              "$ref": "RequestId"
+            },
+            {
+              "name": "url",
+              "description": "If set, the request url will be modified in a way that's not observable by page.",
+              "optional": true,
+              "type": "string"
+            },
+            {
+              "name": "method",
+              "description": "If set, the request method is overridden.",
+              "optional": true,
+              "type": "string"
+            },
+            {
+              "name": "postData",
+              "description": "If set, overrides the post data in the request.",
+              "optional": true,
+              "type": "binary"
+            },
+            {
+              "name": "headers",
+              "description": "If set, overrides the request headers. Note that the overrides do not\nextend to subsequent redirect hops, if a redirect happens. Another override\nmay be applied to a different request produced by a redirect.",
+              "optional": true,
+              "type": "array",
+              "items": {
+                "$ref": "HeaderEntry"
+              }
+            },
+            {
+              "name": "interceptResponse",
+              "description": "If set, overrides response interception behavior for this request.",
+              "experimental": true,
               "optional": true,
               "type": "boolean"
+            }
+          ]
+        },
+        {
+          "name": "continueWithAuth",
+          "description": "Continues a request supplying authChallengeResponse following authRequired event.",
+          "parameters": [
+            {
+              "name": "requestId",
+              "description": "An id the client received in authRequired event.",
+              "$ref": "RequestId"
             },
             {
-              "name": "data",
-              "description": "Data that were read.",
+              "name": "authChallengeResponse",
+              "description": "Response to  with an authChallenge.",
+              "$ref": "AuthChallengeResponse"
+            }
+          ]
+        },
+        {
+          "name": "continueResponse",
+          "description": "Continues loading of the paused response, optionally modifying the\nresponse headers. If either responseCode or headers are modified, all of them\nmust be present.",
+          "experimental": true,
+          "parameters": [
+            {
+              "name": "requestId",
+              "description": "An id the client received in requestPaused event.",
+              "$ref": "RequestId"
+            },
+            {
+              "name": "responseCode",
+              "description": "An HTTP response code. If absent, original response code will be used.",
+              "optional": true,
+              "type": "integer"
+            },
+            {
+              "name": "responsePhrase",
+              "description": "A textual representation of responseCode.\nIf absent, a standard phrase matching responseCode is used.",
+              "optional": true,
               "type": "string"
             },
             {
-              "name": "eof",
-              "description": "Set if the end-of-file condition occurred while reading.",
+              "name": "responseHeaders",
+              "description": "Response headers. If absent, original response headers will be used.",
+              "optional": true,
+              "type": "array",
+              "items": {
+                "$ref": "HeaderEntry"
+              }
+            },
+            {
+              "name": "binaryResponseHeaders",
+              "description": "Alternative way of specifying response headers as a \\0-separated\nseries of name: value pairs. Prefer the above method unless you\nneed to represent some non-UTF8 values that can't be transmitted\nover the protocol as text.",
+              "optional": true,
+              "type": "binary"
+            }
+          ]
+        },
+        {
+          "name": "getResponseBody",
+          "description": "Causes the body of the response to be received from the server and\nreturned as a single string. May only be issued for a request that\nis paused in the Response stage and is mutually exclusive with\ntakeResponseBodyForInterceptionAsStream. Calling other methods that\naffect the request or disabling fetch domain before body is received\nresults in an undefined behavior.\nNote that the response body is not available for redirects. Requests\npaused in the _redirect received_ state may be differentiated by\n`responseCode` and presence of `location` response header, see\ncomments to `requestPaused` for details.",
+          "parameters": [
+            {
+              "name": "requestId",
+              "description": "Identifier for the intercepted request to get body for.",
+              "$ref": "RequestId"
+            }
+          ],
+          "returns": [
+            {
+              "name": "body",
+              "description": "Response body.",
+              "type": "string"
+            },
+            {
+              "name": "base64Encoded",
+              "description": "True, if content was sent as base64.",
               "type": "boolean"
             }
           ]
         },
         {
-          "name": "resolveBlob",
-          "description": "Return UUID of Blob object specified by a remote object id.",
+          "name": "takeResponseBodyAsStream",
+          "description": "Returns a handle to the stream representing the response body.\nThe request must be paused in the HeadersReceived stage.\nNote that after this command the request can't be continued\nas is -- client either needs to cancel it or to provide the\nresponse body.\nThe stream only supports sequential read, IO.read will fail if the position\nis specified.\nThis method is mutually exclusive with getResponseBody.\nCalling other methods that affect the request or disabling fetch\ndomain before body is received results in an undefined behavior.",
           "parameters": [
             {
-              "name": "objectId",
-              "description": "Object id of a Blob object wrapper.",
-              "$ref": "Runtime.RemoteObjectId"
+              "name": "requestId",
+              "$ref": "RequestId"
             }
           ],
           "returns": [
             {
-              "name": "uuid",
-              "description": "UUID of the specified Blob.",
+              "name": "stream",
+              "$ref": "IO.StreamHandle"
+            }
+          ]
+        }
+      ],
+      "events": [
+        {
+          "name": "requestPaused",
+          "description": "Issued when the domain is enabled and the request URL matches the\nspecified filter. The request is paused until the client responds\nwith one of continueRequest, failRequest or fulfillRequest.\nThe stage of the request can be determined by presence of responseErrorReason\nand responseStatusCode -- the request is at the response stage if either\nof these fields is present and in the request stage otherwise.\nRedirect responses and subsequent requests are reported similarly to regular\nresponses and requests. Redirect responses may be distinguished by the value\nof `responseStatusCode` (which is one of 301, 302, 303, 307, 308) along with\npresence of the `location` header. Requests resulting from a redirect will\nhave `redirectedRequestId` field set.",
+          "parameters": [
+            {
+              "name": "requestId",
+              "description": "Each request the page makes will have a unique id.",
+              "$ref": "RequestId"
+            },
+            {
+              "name": "request",
+              "description": "The details of the request.",
+              "$ref": "Network.Request"
+            },
+            {
+              "name": "frameId",
+              "description": "The id of the frame that initiated the request.",
+              "$ref": "Page.FrameId"
+            },
+            {
+              "name": "resourceType",
+              "description": "How the requested resource will be used.",
+              "$ref": "Network.ResourceType"
+            },
+            {
+              "name": "responseErrorReason",
+              "description": "Response error if intercepted at response stage.",
+              "optional": true,
+              "$ref": "Network.ErrorReason"
+            },
+            {
+              "name": "responseStatusCode",
+              "description": "Response code if intercepted at response stage.",
+              "optional": true,
+              "type": "integer"
+            },
+            {
+              "name": "responseStatusText",
+              "description": "Response status text if intercepted at response stage.",
+              "optional": true,
               "type": "string"
+            },
+            {
+              "name": "responseHeaders",
+              "description": "Response headers if intercepted at the response stage.",
+              "optional": true,
+              "type": "array",
+              "items": {
+                "$ref": "HeaderEntry"
+              }
+            },
+            {
+              "name": "networkId",
+              "description": "If the intercepted request had a corresponding Network.requestWillBeSent event fired for it,\nthen this networkId will be the same as the requestId present in the requestWillBeSent event.",
+              "optional": true,
+              "$ref": "Network.RequestId"
+            },
+            {
+              "name": "redirectedRequestId",
+              "description": "If the request is due to a redirect response from the server, the id of the request that\nhas caused the redirect.",
+              "experimental": true,
+              "optional": true,
+              "$ref": "RequestId"
+            }
+          ]
+        },
+        {
+          "name": "authRequired",
+          "description": "Issued when the domain is enabled with handleAuthRequests set to true.\nThe request is paused until client responds with continueWithAuth.",
+          "parameters": [
+            {
+              "name": "requestId",
+              "description": "Each request the page makes will have a unique id.",
+              "$ref": "RequestId"
+            },
+            {
+              "name": "request",
+              "description": "The details of the request.",
+              "$ref": "Network.Request"
+            },
+            {
+              "name": "frameId",
+              "description": "The id of the frame that initiated the request.",
+              "$ref": "Page.FrameId"
+            },
+            {
+              "name": "resourceType",
+              "description": "How the requested resource will be used.",
+              "$ref": "Network.ResourceType"
+            },
+            {
+              "name": "authChallenge",
+              "description": "Details of the Authorization Challenge encountered.\nIf this is set, client should respond with continueRequest that\ncontains AuthChallengeResponse.",
+              "$ref": "AuthChallenge"
             }
           ]
         }
@@ -10978,6 +12247,185 @@
       ]
     },
     {
+      "domain": "HeadlessExperimental",
+      "description": "This domain provides experimental commands only supported in headless mode.",
+      "experimental": true,
+      "dependencies": [
+        "Page",
+        "Runtime"
+      ],
+      "types": [
+        {
+          "id": "ScreenshotParams",
+          "description": "Encoding options for a screenshot.",
+          "type": "object",
+          "properties": [
+            {
+              "name": "format",
+              "description": "Image compression format (defaults to png).",
+              "optional": true,
+              "type": "string",
+              "enum": [
+                "jpeg",
+                "png",
+                "webp"
+              ]
+            },
+            {
+              "name": "quality",
+              "description": "Compression quality from range [0..100] (jpeg and webp only).",
+              "optional": true,
+              "type": "integer"
+            },
+            {
+              "name": "optimizeForSpeed",
+              "description": "Optimize image encoding for speed, not for resulting size (defaults to false)",
+              "optional": true,
+              "type": "boolean"
+            }
+          ]
+        }
+      ],
+      "commands": [
+        {
+          "name": "beginFrame",
+          "description": "Sends a BeginFrame to the target and returns when the frame was completed. Optionally captures a\nscreenshot from the resulting frame. Requires that the target was created with enabled\nBeginFrameControl. Designed for use with --run-all-compositor-stages-before-draw, see also\nhttps://goo.gle/chrome-headless-rendering for more background.",
+          "parameters": [
+            {
+              "name": "frameTimeTicks",
+              "description": "Timestamp of this BeginFrame in Renderer TimeTicks (milliseconds of uptime). If not set,\nthe current time will be used.",
+              "optional": true,
+              "type": "number"
+            },
+            {
+              "name": "interval",
+              "description": "The interval between BeginFrames that is reported to the compositor, in milliseconds.\nDefaults to a 60 frames/second interval, i.e. about 16.666 milliseconds.",
+              "optional": true,
+              "type": "number"
+            },
+            {
+              "name": "noDisplayUpdates",
+              "description": "Whether updates should not be committed and drawn onto the display. False by default. If\ntrue, only side effects of the BeginFrame will be run, such as layout and animations, but\nany visual updates may not be visible on the display or in screenshots.",
+              "optional": true,
+              "type": "boolean"
+            },
+            {
+              "name": "screenshot",
+              "description": "If set, a screenshot of the frame will be captured and returned in the response. Otherwise,\nno screenshot will be captured. Note that capturing a screenshot can fail, for example,\nduring renderer initialization. In such a case, no screenshot data will be returned.",
+              "optional": true,
+              "$ref": "ScreenshotParams"
+            }
+          ],
+          "returns": [
+            {
+              "name": "hasDamage",
+              "description": "Whether the BeginFrame resulted in damage and, thus, a new frame was committed to the\ndisplay. Reported for diagnostic uses, may be removed in the future.",
+              "type": "boolean"
+            },
+            {
+              "name": "screenshotData",
+              "description": "Base64-encoded image data of the screenshot, if one was requested and successfully taken.",
+              "optional": true,
+              "type": "binary"
+            }
+          ]
+        },
+        {
+          "name": "disable",
+          "description": "Disables headless events for the target.",
+          "deprecated": true
+        },
+        {
+          "name": "enable",
+          "description": "Enables headless events for the target.",
+          "deprecated": true
+        }
+      ]
+    },
+    {
+      "domain": "IO",
+      "description": "Input/Output operations for streams produced by DevTools.",
+      "types": [
+        {
+          "id": "StreamHandle",
+          "description": "This is either obtained from another method or specified as `blob:<uuid>` where\n`<uuid>` is an UUID of a Blob.",
+          "type": "string"
+        }
+      ],
+      "commands": [
+        {
+          "name": "close",
+          "description": "Close the stream, discard any temporary backing storage.",
+          "parameters": [
+            {
+              "name": "handle",
+              "description": "Handle of the stream to close.",
+              "$ref": "StreamHandle"
+            }
+          ]
+        },
+        {
+          "name": "read",
+          "description": "Read a chunk of the stream",
+          "parameters": [
+            {
+              "name": "handle",
+              "description": "Handle of the stream to read.",
+              "$ref": "StreamHandle"
+            },
+            {
+              "name": "offset",
+              "description": "Seek to the specified offset before reading (if not specified, proceed with offset\nfollowing the last read). Some types of streams may only support sequential reads.",
+              "optional": true,
+              "type": "integer"
+            },
+            {
+              "name": "size",
+              "description": "Maximum number of bytes to read (left upon the agent discretion if not specified).",
+              "optional": true,
+              "type": "integer"
+            }
+          ],
+          "returns": [
+            {
+              "name": "base64Encoded",
+              "description": "Set if the data is base64-encoded",
+              "optional": true,
+              "type": "boolean"
+            },
+            {
+              "name": "data",
+              "description": "Data that were read.",
+              "type": "string"
+            },
+            {
+              "name": "eof",
+              "description": "Set if the end-of-file condition occurred while reading.",
+              "type": "boolean"
+            }
+          ]
+        },
+        {
+          "name": "resolveBlob",
+          "description": "Return UUID of Blob object specified by a remote object id.",
+          "parameters": [
+            {
+              "name": "objectId",
+              "description": "Object id of a Blob object wrapper.",
+              "$ref": "Runtime.RemoteObjectId"
+            }
+          ],
+          "returns": [
+            {
+              "name": "uuid",
+              "description": "UUID of the specified Blob.",
+              "type": "string"
+            }
+          ]
+        }
+      ]
+    },
+    {
       "domain": "IndexedDB",
       "experimental": true,
       "dependencies": [
@@ -12871,6 +14319,219 @@
       ]
     },
     {
+      "domain": "Media",
+      "description": "This domain allows detailed inspection of media elements.",
+      "experimental": true,
+      "types": [
+        {
+          "id": "PlayerId",
+          "description": "Players will get an ID that is unique within the agent context.",
+          "type": "string"
+        },
+        {
+          "id": "Timestamp",
+          "type": "number"
+        },
+        {
+          "id": "PlayerMessage",
+          "description": "Have one type per entry in MediaLogRecord::Type\nCorresponds to kMessage",
+          "type": "object",
+          "properties": [
+            {
+              "name": "level",
+              "description": "Keep in sync with MediaLogMessageLevel\nWe are currently keeping the message level 'error' separate from the\nPlayerError type because right now they represent different things,\nthis one being a DVLOG(ERROR) style log message that gets printed\nbased on what log level is selected in the UI, and the other is a\nrepresentation of a media::PipelineStatus object. Soon however we're\ngoing to be moving away from using PipelineStatus for errors and\nintroducing a new error type which should hopefully let us integrate\nthe error log level into the PlayerError type.",
+              "type": "string",
+              "enum": [
+                "error",
+                "warning",
+                "info",
+                "debug"
+              ]
+            },
+            {
+              "name": "message",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "id": "PlayerProperty",
+          "description": "Corresponds to kMediaPropertyChange",
+          "type": "object",
+          "properties": [
+            {
+              "name": "name",
+              "type": "string"
+            },
+            {
+              "name": "value",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "id": "PlayerEvent",
+          "description": "Corresponds to kMediaEventTriggered",
+          "type": "object",
+          "properties": [
+            {
+              "name": "timestamp",
+              "$ref": "Timestamp"
+            },
+            {
+              "name": "value",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "id": "PlayerErrorSourceLocation",
+          "description": "Represents logged source line numbers reported in an error.\nNOTE: file and line are from chromium c++ implementation code, not js.",
+          "type": "object",
+          "properties": [
+            {
+              "name": "file",
+              "type": "string"
+            },
+            {
+              "name": "line",
+              "type": "integer"
+            }
+          ]
+        },
+        {
+          "id": "PlayerError",
+          "description": "Corresponds to kMediaError",
+          "type": "object",
+          "properties": [
+            {
+              "name": "errorType",
+              "type": "string"
+            },
+            {
+              "name": "code",
+              "description": "Code is the numeric enum entry for a specific set of error codes, such\nas PipelineStatusCodes in media/base/pipeline_status.h",
+              "type": "integer"
+            },
+            {
+              "name": "stack",
+              "description": "A trace of where this error was caused / where it passed through.",
+              "type": "array",
+              "items": {
+                "$ref": "PlayerErrorSourceLocation"
+              }
+            },
+            {
+              "name": "cause",
+              "description": "Errors potentially have a root cause error, ie, a DecoderError might be\ncaused by an WindowsError",
+              "type": "array",
+              "items": {
+                "$ref": "PlayerError"
+              }
+            },
+            {
+              "name": "data",
+              "description": "Extra data attached to an error, such as an HRESULT, Video Codec, etc.",
+              "type": "object"
+            }
+          ]
+        }
+      ],
+      "events": [
+        {
+          "name": "playerPropertiesChanged",
+          "description": "This can be called multiple times, and can be used to set / override /\nremove player properties. A null propValue indicates removal.",
+          "parameters": [
+            {
+              "name": "playerId",
+              "$ref": "PlayerId"
+            },
+            {
+              "name": "properties",
+              "type": "array",
+              "items": {
+                "$ref": "PlayerProperty"
+              }
+            }
+          ]
+        },
+        {
+          "name": "playerEventsAdded",
+          "description": "Send events as a list, allowing them to be batched on the browser for less\ncongestion. If batched, events must ALWAYS be in chronological order.",
+          "parameters": [
+            {
+              "name": "playerId",
+              "$ref": "PlayerId"
+            },
+            {
+              "name": "events",
+              "type": "array",
+              "items": {
+                "$ref": "PlayerEvent"
+              }
+            }
+          ]
+        },
+        {
+          "name": "playerMessagesLogged",
+          "description": "Send a list of any messages that need to be delivered.",
+          "parameters": [
+            {
+              "name": "playerId",
+              "$ref": "PlayerId"
+            },
+            {
+              "name": "messages",
+              "type": "array",
+              "items": {
+                "$ref": "PlayerMessage"
+              }
+            }
+          ]
+        },
+        {
+          "name": "playerErrorsRaised",
+          "description": "Send a list of any errors that need to be delivered.",
+          "parameters": [
+            {
+              "name": "playerId",
+              "$ref": "PlayerId"
+            },
+            {
+              "name": "errors",
+              "type": "array",
+              "items": {
+                "$ref": "PlayerError"
+              }
+            }
+          ]
+        },
+        {
+          "name": "playersCreated",
+          "description": "Called whenever a player is created, or when a new agent joins and receives\na list of active players. If an agent is restored, it will receive the full\nlist of player ids and all events again.",
+          "parameters": [
+            {
+              "name": "players",
+              "type": "array",
+              "items": {
+                "$ref": "PlayerId"
+              }
+            }
+          ]
+        }
+      ],
+      "commands": [
+        {
+          "name": "enable",
+          "description": "Enables the Media domain"
+        },
+        {
+          "name": "disable",
+          "description": "Disables the Media domain."
+        }
+      ]
+    },
+    {
       "domain": "Memory",
       "experimental": true,
       "types": [
@@ -17930,7 +19591,7 @@
         },
         {
           "name": "highlightRect",
-          "description": "Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport.",
+          "description": "Highlights given rectangle. Coordinates are absolute with respect to the main frame viewport.\nIssue: the method does not handle device pixel ratio (DPR) correctly.\nThe coordinates currently have to be adjusted by the client\nif DPR is not 1 (see crbug.com/437807128).",
           "parameters": [
             {
               "name": "x",
@@ -18255,6 +19916,194 @@
       ]
     },
     {
+      "domain": "PWA",
+      "description": "This domain allows interacting with the browser to control PWAs.",
+      "experimental": true,
+      "types": [
+        {
+          "id": "FileHandlerAccept",
+          "description": "The following types are the replica of\nhttps://crsrc.org/c/chrome/browser/web_applications/proto/web_app_os_integration_state.proto;drc=9910d3be894c8f142c977ba1023f30a656bc13fc;l=67",
+          "type": "object",
+          "properties": [
+            {
+              "name": "mediaType",
+              "description": "New name of the mimetype according to\nhttps://www.iana.org/assignments/media-types/media-types.xhtml",
+              "type": "string"
+            },
+            {
+              "name": "fileExtensions",
+              "type": "array",
+              "items": {
+                "type": "string"
+              }
+            }
+          ]
+        },
+        {
+          "id": "FileHandler",
+          "type": "object",
+          "properties": [
+            {
+              "name": "action",
+              "type": "string"
+            },
+            {
+              "name": "accepts",
+              "type": "array",
+              "items": {
+                "$ref": "FileHandlerAccept"
+              }
+            },
+            {
+              "name": "displayName",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "id": "DisplayMode",
+          "description": "If user prefers opening the app in browser or an app window.",
+          "type": "string",
+          "enum": [
+            "standalone",
+            "browser"
+          ]
+        }
+      ],
+      "commands": [
+        {
+          "name": "getOsAppState",
+          "description": "Returns the following OS state for the given manifest id.",
+          "parameters": [
+            {
+              "name": "manifestId",
+              "description": "The id from the webapp's manifest file, commonly it's the url of the\nsite installing the webapp. See\nhttps://web.dev/learn/pwa/web-app-manifest.",
+              "type": "string"
+            }
+          ],
+          "returns": [
+            {
+              "name": "badgeCount",
+              "type": "integer"
+            },
+            {
+              "name": "fileHandlers",
+              "type": "array",
+              "items": {
+                "$ref": "FileHandler"
+              }
+            }
+          ]
+        },
+        {
+          "name": "install",
+          "description": "Installs the given manifest identity, optionally using the given installUrlOrBundleUrl\n\nIWA-specific install description:\nmanifestId corresponds to isolated-app:// + web_package::SignedWebBundleId\n\nFile installation mode:\nThe installUrlOrBundleUrl can be either file:// or http(s):// pointing\nto a signed web bundle (.swbn). In this case SignedWebBundleId must correspond to\nThe .swbn file's signing key.\n\nDev proxy installation mode:\ninstallUrlOrBundleUrl must be http(s):// that serves dev mode IWA.\nweb_package::SignedWebBundleId must be of type dev proxy.\n\nThe advantage of dev proxy mode is that all changes to IWA\nautomatically will be reflected in the running app without\nreinstallation.\n\nTo generate bundle id for proxy mode:\n1. Generate 32 random bytes.\n2. Add a specific suffix 0x00 at the end.\n3. Encode the entire sequence using Base32 without padding.\n\nIf Chrome is not in IWA dev\nmode, the installation will fail, regardless of the state of the allowlist.",
+          "parameters": [
+            {
+              "name": "manifestId",
+              "type": "string"
+            },
+            {
+              "name": "installUrlOrBundleUrl",
+              "description": "The location of the app or bundle overriding the one derived from the\nmanifestId.",
+              "optional": true,
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "name": "uninstall",
+          "description": "Uninstalls the given manifest_id and closes any opened app windows.",
+          "parameters": [
+            {
+              "name": "manifestId",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "name": "launch",
+          "description": "Launches the installed web app, or an url in the same web app instead of the\ndefault start url if it is provided. Returns a page Target.TargetID which\ncan be used to attach to via Target.attachToTarget or similar APIs.",
+          "parameters": [
+            {
+              "name": "manifestId",
+              "type": "string"
+            },
+            {
+              "name": "url",
+              "optional": true,
+              "type": "string"
+            }
+          ],
+          "returns": [
+            {
+              "name": "targetId",
+              "description": "ID of the tab target created as a result.",
+              "$ref": "Target.TargetID"
+            }
+          ]
+        },
+        {
+          "name": "launchFilesInApp",
+          "description": "Opens one or more local files from an installed web app identified by its\nmanifestId. The web app needs to have file handlers registered to process\nthe files. The API returns one or more page Target.TargetIDs which can be\nused to attach to via Target.attachToTarget or similar APIs.\nIf some files in the parameters cannot be handled by the web app, they will\nbe ignored. If none of the files can be handled, this API returns an error.\nIf no files are provided as the parameter, this API also returns an error.\n\nAccording to the definition of the file handlers in the manifest file, one\nTarget.TargetID may represent a page handling one or more files. The order\nof the returned Target.TargetIDs is not guaranteed.\n\nTODO(crbug.com/339454034): Check the existences of the input files.",
+          "parameters": [
+            {
+              "name": "manifestId",
+              "type": "string"
+            },
+            {
+              "name": "files",
+              "type": "array",
+              "items": {
+                "type": "string"
+              }
+            }
+          ],
+          "returns": [
+            {
+              "name": "targetIds",
+              "description": "IDs of the tab targets created as the result.",
+              "type": "array",
+              "items": {
+                "$ref": "Target.TargetID"
+              }
+            }
+          ]
+        },
+        {
+          "name": "openCurrentPageInApp",
+          "description": "Opens the current page in its web app identified by the manifest id, needs\nto be called on a page target. This function returns immediately without\nwaiting for the app to finish loading.",
+          "parameters": [
+            {
+              "name": "manifestId",
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "name": "changeAppUserSettings",
+          "description": "Changes user settings of the web app identified by its manifestId. If the\napp was not installed, this command returns an error. Unset parameters will\nbe ignored; unrecognized values will cause an error.\n\nUnlike the ones defined in the manifest files of the web apps, these\nsettings are provided by the browser and controlled by the users, they\nimpact the way the browser handling the web apps.\n\nSee the comment of each parameter.",
+          "parameters": [
+            {
+              "name": "manifestId",
+              "type": "string"
+            },
+            {
+              "name": "linkCapturing",
+              "description": "If user allows the links clicked on by the user in the app's scope, or\nextended scope if the manifest has scope extensions and the flags\n`DesktopPWAsLinkCapturingWithScopeExtensions` and\n`WebAppEnableScopeExtensions` are enabled.\n\nNote, the API does not support resetting the linkCapturing to the\ninitial value, uninstalling and installing the web app again will reset\nit.\n\nTODO(crbug.com/339453269): Setting this value on ChromeOS is not\nsupported yet.",
+              "optional": true,
+              "type": "boolean"
+            },
+            {
+              "name": "displayMode",
+              "optional": true,
+              "$ref": "DisplayMode"
+            }
+          ]
+        }
+      ]
+    },
+    {
       "domain": "Page",
       "description": "Actions and events related to the inspected page belong to the page domain.",
       "dependencies": [
@@ -22027,8 +23876,449 @@
       ]
     },
     {
+      "domain": "Preload",
+      "experimental": true,
+      "types": [
+        {
+          "id": "RuleSetId",
+          "description": "Unique id",
+          "type": "string"
+        },
+        {
+          "id": "RuleSet",
+          "description": "Corresponds to SpeculationRuleSet",
+          "type": "object",
+          "properties": [
+            {
+              "name": "id",
+              "$ref": "RuleSetId"
+            },
+            {
+              "name": "loaderId",
+              "description": "Identifies a document which the rule set is associated with.",
+              "$ref": "Network.LoaderId"
+            },
+            {
+              "name": "sourceText",
+              "description": "Source text of JSON representing the rule set. If it comes from\n`<script>` tag, it is the textContent of the node. Note that it is\na JSON for valid case.\n\nSee also:\n- https://wicg.github.io/nav-speculation/speculation-rules.html\n- https://github.com/WICG/nav-speculation/blob/main/triggers.md",
+              "type": "string"
+            },
+            {
+              "name": "backendNodeId",
+              "description": "A speculation rule set is either added through an inline\n`<script>` tag or through an external resource via the\n'Speculation-Rules' HTTP header. For the first case, we include\nthe BackendNodeId of the relevant `<script>` tag. For the second\ncase, we include the external URL where the rule set was loaded\nfrom, and also RequestId if Network domain is enabled.\n\nSee also:\n- https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-script\n- https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-header",
+              "optional": true,
+              "$ref": "DOM.BackendNodeId"
+            },
+            {
+              "name": "url",
+              "optional": true,
+              "type": "string"
+            },
+            {
+              "name": "requestId",
+              "optional": true,
+              "$ref": "Network.RequestId"
+            },
+            {
+              "name": "errorType",
+              "description": "Error information\n`errorMessage` is null iff `errorType` is null.",
+              "optional": true,
+              "$ref": "RuleSetErrorType"
+            },
+            {
+              "name": "errorMessage",
+              "description": "TODO(https://crbug.com/1425354): Replace this property with structured error.",
+              "deprecated": true,
+              "optional": true,
+              "type": "string"
+            }
+          ]
+        },
+        {
+          "id": "RuleSetErrorType",
+          "type": "string",
+          "enum": [
+            "SourceIsNotJsonObject",
+            "InvalidRulesSkipped",
+            "InvalidRulesetLevelTag"
+          ]
+        },
+        {
+          "id": "SpeculationAction",
+          "description": "The type of preloading attempted. It corresponds to\nmojom::SpeculationAction (although PrefetchWithSubresources is omitted as it\nisn't being used by clients).",
+          "type": "string",
+          "enum": [
+            "Prefetch",
+            "Prerender"
+          ]
+        },
+        {
+          "id": "SpeculationTargetHint",
+          "description": "Corresponds to mojom::SpeculationTargetHint.\nSee https://github.com/WICG/nav-speculation/blob/main/triggers.md#window-name-targeting-hints",
+          "type": "string",
+          "enum": [
+            "Blank",
+            "Self"
+          ]
+        },
+        {
+          "id": "PreloadingAttemptKey",
+          "description": "A key that identifies a preloading attempt.\n\nThe url used is the url specified by the trigger (i.e. the initial URL), and\nnot the final url that is navigated to. For example, prerendering allows\nsame-origin main frame navigations during the attempt, but the attempt is\nstill keyed with the initial URL.",
+          "type": "object",
+          "properties": [
+            {
+              "name": "loaderId",
+              "$ref": "Network.LoaderId"
+            },
+            {
+              "name": "action",
+              "$ref": "SpeculationAction"
+            },
+            {
+              "name": "url",
+              "type": "string"
+            },
+            {
+              "name": "targetHint",
+              "optional": true,
+              "$ref": "SpeculationTargetHint"
+            }
+          ]
+        },
+        {
+          "id": "PreloadingAttemptSource",
+          "description": "Lists sources for a preloading attempt, specifically the ids of rule sets\nthat had a speculation rule that triggered the attempt, and the\nBackendNodeIds of <a href> or <area href> elements that triggered the\nattempt (in the case of attempts triggered by a document rule). It is\npossible for multiple rule sets and links to trigger a single attempt.",
+          "type": "object",
+          "properties": [
+            {
+              "name": "key",
+              "$ref": "PreloadingAttemptKey"
+            },
+            {
+              "name": "ruleSetIds",
+              "type": "array",
+              "items": {
+                "$ref": "RuleSetId"
+              }
+            },
+            {
+              "name": "nodeIds",
+              "type": "array",
+              "items": {
+                "$ref": "DOM.BackendNodeId"
+              }
+            }
+          ]
+        },
+        {
+          "id": "PreloadPipelineId",
+          "description": "Chrome manages different types of preloads together using a\nconcept of preloading pipeline. For example, if a site uses a\nSpeculationRules for prerender, Chrome first starts a prefetch and\nthen upgrades it to prerender.\n\nCDP events for them are emitted separately but they share\n`PreloadPipelineId`.",
+          "type": "string"
+        },
+        {
+          "id": "PrerenderFinalStatus",
+          "description": "List of FinalStatus reasons for Prerender2.",
+          "type": "string",
+          "enum": [
+            "Activated",
+            "Destroyed",
+            "LowEndDevice",
+            "InvalidSchemeRedirect",
+            "InvalidSchemeNavigation",
+            "NavigationRequestBlockedByCsp",
+            "MojoBinderPolicy",
+            "RendererProcessCrashed",
+            "RendererProcessKilled",
+            "Download",
+            "TriggerDestroyed",
+            "NavigationNotCommitted",
+            "NavigationBadHttpStatus",
+            "ClientCertRequested",
+            "NavigationRequestNetworkError",
+            "CancelAllHostsForTesting",
+            "DidFailLoad",
+            "Stop",
+            "SslCertificateError",
+            "LoginAuthRequested",
+            "UaChangeRequiresReload",
+            "BlockedByClient",
+            "AudioOutputDeviceRequested",
+            "MixedContent",
+            "TriggerBackgrounded",
+            "MemoryLimitExceeded",
+            "DataSaverEnabled",
+            "TriggerUrlHasEffectiveUrl",
+            "ActivatedBeforeStarted",
+            "InactivePageRestriction",
+            "StartFailed",
+            "TimeoutBackgrounded",
+            "CrossSiteRedirectInInitialNavigation",
+            "CrossSiteNavigationInInitialNavigation",
+            "SameSiteCrossOriginRedirectNotOptInInInitialNavigation",
+            "SameSiteCrossOriginNavigationNotOptInInInitialNavigation",
+            "ActivationNavigationParameterMismatch",
+            "ActivatedInBackground",
+            "EmbedderHostDisallowed",
+            "ActivationNavigationDestroyedBeforeSuccess",
+            "TabClosedByUserGesture",
+            "TabClosedWithoutUserGesture",
+            "PrimaryMainFrameRendererProcessCrashed",
+            "PrimaryMainFrameRendererProcessKilled",
+            "ActivationFramePolicyNotCompatible",
+            "PreloadingDisabled",
+            "BatterySaverEnabled",
+            "ActivatedDuringMainFrameNavigation",
+            "PreloadingUnsupportedByWebContents",
+            "CrossSiteRedirectInMainFrameNavigation",
+            "CrossSiteNavigationInMainFrameNavigation",
+            "SameSiteCrossOriginRedirectNotOptInInMainFrameNavigation",
+            "SameSiteCrossOriginNavigationNotOptInInMainFrameNavigation",
+            "MemoryPressureOnTrigger",
+            "MemoryPressureAfterTriggered",
+            "PrerenderingDisabledByDevTools",
+            "SpeculationRuleRemoved",
+            "ActivatedWithAuxiliaryBrowsingContexts",
+            "MaxNumOfRunningEagerPrerendersExceeded",
+            "MaxNumOfRunningNonEagerPrerendersExceeded",
+            "MaxNumOfRunningEmbedderPrerendersExceeded",
+            "PrerenderingUrlHasEffectiveUrl",
+            "RedirectedPrerenderingUrlHasEffectiveUrl",
+            "ActivationUrlHasEffectiveUrl",
+            "JavaScriptInterfaceAdded",
+            "JavaScriptInterfaceRemoved",
+            "AllPrerenderingCanceled",
+            "WindowClosed",
+            "SlowNetwork",
+            "OtherPrerenderedPageActivated",
+            "V8OptimizerDisabled",
+            "PrerenderFailedDuringPrefetch",
+            "BrowsingDataRemoved",
+            "PrerenderHostReused"
+          ]
+        },
+        {
+          "id": "PreloadingStatus",
+          "description": "Preloading status values, see also PreloadingTriggeringOutcome. This\nstatus is shared by prefetchStatusUpdated and prerenderStatusUpdated.",
+          "type": "string",
+          "enum": [
+            "Pending",
+            "Running",
+            "Ready",
+            "Success",
+            "Failure",
+            "NotSupported"
+          ]
+        },
+        {
+          "id": "PrefetchStatus",
+          "description": "TODO(https://crbug.com/1384419): revisit the list of PrefetchStatus and\nfilter out the ones that aren't necessary to the developers.",
+          "type": "string",
+          "enum": [
+            "PrefetchAllowed",
+            "PrefetchFailedIneligibleRedirect",
+            "PrefetchFailedInvalidRedirect",
+            "PrefetchFailedMIMENotSupported",
+            "PrefetchFailedNetError",
+            "PrefetchFailedNon2XX",
+            "PrefetchEvictedAfterBrowsingDataRemoved",
+            "PrefetchEvictedAfterCandidateRemoved",
+            "PrefetchEvictedForNewerPrefetch",
+            "PrefetchHeldback",
+            "PrefetchIneligibleRetryAfter",
+            "PrefetchIsPrivacyDecoy",
+            "PrefetchIsStale",
+            "PrefetchNotEligibleBrowserContextOffTheRecord",
+            "PrefetchNotEligibleDataSaverEnabled",
+            "PrefetchNotEligibleExistingProxy",
+            "PrefetchNotEligibleHostIsNonUnique",
+            "PrefetchNotEligibleNonDefaultStoragePartition",
+            "PrefetchNotEligibleSameSiteCrossOriginPrefetchRequiredProxy",
+            "PrefetchNotEligibleSchemeIsNotHttps",
+            "PrefetchNotEligibleUserHasCookies",
+            "PrefetchNotEligibleUserHasServiceWorker",
+            "PrefetchNotEligibleUserHasServiceWorkerNoFetchHandler",
+            "PrefetchNotEligibleRedirectFromServiceWorker",
+            "PrefetchNotEligibleRedirectToServiceWorker",
+            "PrefetchNotEligibleBatterySaverEnabled",
+            "PrefetchNotEligiblePreloadingDisabled",
+            "PrefetchNotFinishedInTime",
+            "PrefetchNotStarted",
+            "PrefetchNotUsedCookiesChanged",
+            "PrefetchProxyNotAvailable",
+            "PrefetchResponseUsed",
+            "PrefetchSuccessfulButNotUsed",
+            "PrefetchNotUsedProbeFailed"
+          ]
+        },
+        {
+          "id": "PrerenderMismatchedHeaders",
+          "description": "Information of headers to be displayed when the header mismatch occurred.",
+          "type": "object",
+          "properties": [
+            {
+              "name": "headerName",
+              "type": "string"
+            },
+            {
+              "name": "initialValue",
+              "optional": true,
+              "type": "string"
+            },
+            {
+              "name": "activationValue",
+              "optional": true,
+              "type": "string"
+            }
+          ]
+        }
+      ],
+      "commands": [
+        {
+          "name": "enable"
+        },
+        {
+          "name": "disable"
+        }
+      ],
+      "events": [
+        {
+          "name": "ruleSetUpdated",
+          "description": "Upsert. Currently, it is only emitted when a rule set added.",
+          "parameters": [
+            {
+              "name": "ruleSet",
+              "$ref": "RuleSet"
+            }
+          ]
+        },
+        {
+          "name": "ruleSetRemoved",
+          "parameters": [
+            {
+              "name": "id",
+              "$ref": "RuleSetId"
+            }
+          ]
+        },
+        {
+          "name": "preloadEnabledStateUpdated",
+          "description": "Fired when a preload enabled state is updated.",
+          "parameters": [
+            {
+              "name": "disabledByPreference",
+              "type": "boolean"
+            },
+            {
+              "name": "disabledByDataSaver",
+              "type": "boolean"
+            },
+            {
+              "name": "disabledByBatterySaver",
+              "type": "boolean"
+            },
+            {
+              "name": "disabledByHoldbackPrefetchSpeculationRules",
+              "type": "boolean"
+            },
+            {
+              "name": "disabledByHoldbackPrerenderSpeculationRules",
+              "type": "boolean"
+            }
+          ]
+        },
+        {
+          "name": "prefetchStatusUpdated",
+          "description": "Fired when a prefetch attempt is updated.",
+          "parameters": [
+            {
+              "name": "key",
+              "$ref": "PreloadingAttemptKey"
+            },
+            {
+              "name": "pipelineId",
+              "$ref": "PreloadPipelineId"
+            },
+            {
+              "name": "initiatingFrameId",
+              "description": "The frame id of the frame initiating prefetch.",
+              "$ref": "Page.FrameId"
+            },
+            {
+              "name": "prefetchUrl",
+              "type": "string"
+            },
+            {
+              "name": "status",
+              "$ref": "PreloadingStatus"
+            },
+            {
+              "name": "prefetchStatus",
+              "$ref": "PrefetchStatus"
+            },
+            {
+              "name": "requestId",
+              "$ref": "Network.RequestId"
+            }
+          ]
+        },
+        {
+          "name": "prerenderStatusUpdated",
+          "description": "Fired when a prerender attempt is updated.",
+          "parameters": [
+            {
+              "name": "key",
+              "$ref": "PreloadingAttemptKey"
+            },
+            {
+              "name": "pipelineId",
+              "$ref": "PreloadPipelineId"
+            },
+            {
+              "name": "status",
+              "$ref": "PreloadingStatus"
+            },
+            {
+              "name": "prerenderStatus",
+              "optional": true,
+              "$ref": "PrerenderFinalStatus"
+            },
+            {
+              "name": "disallowedMojoInterface",
+              "description": "This is used to give users more information about the name of Mojo interface\nthat is incompatible with prerender and has caused the cancellation of the attempt.",
+              "optional": true,
+              "type": "string"
+            },
+            {
+              "name": "mismatchedHeaders",
+              "optional": true,
+              "type": "array",
+              "items": {
+                "$ref": "PrerenderMismatchedHeaders"
+              }
+            }
+          ]
+        },
+        {
+          "name": "preloadingAttemptSourcesUpdated",
+          "description": "Send a list of sources for all preloading attempts in a document.",
+          "parameters": [
+            {
+              "name": "loaderId",
+              "$ref": "Network.LoaderId"
+            },
+            {
+              "name": "preloadingAttemptSources",
+              "type": "array",
+              "items": {
+                "$ref": "PreloadingAttemptSource"
+              }
+            }
+          ]
+        }
+      ]
+    },
+    {
       "domain": "Security",
-      "description": "Security",
       "types": [
         {
           "id": "CertificateId",
@@ -25158,6 +27448,13 @@
               "$ref": "Page.FrameId"
             },
             {
+              "name": "parentFrameId",
+              "description": "Id of the parent frame, only present for the \"iframe\" targets.",
+              "experimental": true,
+              "optional": true,
+              "$ref": "Page.FrameId"
+            },
+            {
               "name": "browserContextId",
               "experimental": true,
               "optional": true,
@@ -26168,455 +28465,6 @@
       ]
     },
     {
-      "domain": "Fetch",
-      "description": "A domain for letting clients substitute browser's network layer with client code.",
-      "dependencies": [
-        "Network",
-        "IO",
-        "Page"
-      ],
-      "types": [
-        {
-          "id": "RequestId",
-          "description": "Unique request identifier.\nNote that this does not identify individual HTTP requests that are part of\na network request.",
-          "type": "string"
-        },
-        {
-          "id": "RequestStage",
-          "description": "Stages of the request to handle. Request will intercept before the request is\nsent. Response will intercept after the response is received (but before response\nbody is received).",
-          "type": "string",
-          "enum": [
-            "Request",
-            "Response"
-          ]
-        },
-        {
-          "id": "RequestPattern",
-          "type": "object",
-          "properties": [
-            {
-              "name": "urlPattern",
-              "description": "Wildcards (`'*'` -> zero or more, `'?'` -> exactly one) are allowed. Escape character is\nbackslash. Omitting is equivalent to `\"*\"`.",
-              "optional": true,
-              "type": "string"
-            },
-            {
-              "name": "resourceType",
-              "description": "If set, only requests for matching resource types will be intercepted.",
-              "optional": true,
-              "$ref": "Network.ResourceType"
-            },
-            {
-              "name": "requestStage",
-              "description": "Stage at which to begin intercepting requests. Default is Request.",
-              "optional": true,
-              "$ref": "RequestStage"
-            }
-          ]
-        },
-        {
-          "id": "HeaderEntry",
-          "description": "Response HTTP header entry",
-          "type": "object",
-          "properties": [
-            {
-              "name": "name",
-              "type": "string"
-            },
-            {
-              "name": "value",
-              "type": "string"
-            }
-          ]
-        },
-        {
-          "id": "AuthChallenge",
-          "description": "Authorization challenge for HTTP status code 401 or 407.",
-          "type": "object",
-          "properties": [
-            {
-              "name": "source",
-              "description": "Source of the authentication challenge.",
-              "optional": true,
-              "type": "string",
-              "enum": [
-                "Server",
-                "Proxy"
-              ]
-            },
-            {
-              "name": "origin",
-              "description": "Origin of the challenger.",
-              "type": "string"
-            },
-            {
-              "name": "scheme",
-              "description": "The authentication scheme used, such as basic or digest",
-              "type": "string"
-            },
-            {
-              "name": "realm",
-              "description": "The realm of the challenge. May be empty.",
-              "type": "string"
-            }
-          ]
-        },
-        {
-          "id": "AuthChallengeResponse",
-          "description": "Response to an AuthChallenge.",
-          "type": "object",
-          "properties": [
-            {
-              "name": "response",
-              "description": "The decision on what to do in response to the authorization challenge.  Default means\ndeferring to the default behavior of the net stack, which will likely either the Cancel\nauthentication or display a popup dialog box.",
-              "type": "string",
-              "enum": [
-                "Default",
-                "CancelAuth",
-                "ProvideCredentials"
-              ]
-            },
-            {
-              "name": "username",
-              "description": "The username to provide, possibly empty. Should only be set if response is\nProvideCredentials.",
-              "optional": true,
-              "type": "string"
-            },
-            {
-              "name": "password",
-              "description": "The password to provide, possibly empty. Should only be set if response is\nProvideCredentials.",
-              "optional": true,
-              "type": "string"
-            }
-          ]
-        }
-      ],
-      "commands": [
-        {
-          "name": "disable",
-          "description": "Disables the fetch domain."
-        },
-        {
-          "name": "enable",
-          "description": "Enables issuing of requestPaused events. A request will be paused until client\ncalls one of failRequest, fulfillRequest or continueRequest/continueWithAuth.",
-          "parameters": [
-            {
-              "name": "patterns",
-              "description": "If specified, only requests matching any of these patterns will produce\nfetchRequested event and will be paused until clients response. If not set,\nall requests will be affected.",
-              "optional": true,
-              "type": "array",
-              "items": {
-                "$ref": "RequestPattern"
-              }
-            },
-            {
-              "name": "handleAuthRequests",
-              "description": "If true, authRequired events will be issued and requests will be paused\nexpecting a call to continueWithAuth.",
-              "optional": true,
-              "type": "boolean"
-            }
-          ]
-        },
-        {
-          "name": "failRequest",
-          "description": "Causes the request to fail with specified reason.",
-          "parameters": [
-            {
-              "name": "requestId",
-              "description": "An id the client received in requestPaused event.",
-              "$ref": "RequestId"
-            },
-            {
-              "name": "errorReason",
-              "description": "Causes the request to fail with the given reason.",
-              "$ref": "Network.ErrorReason"
-            }
-          ]
-        },
-        {
-          "name": "fulfillRequest",
-          "description": "Provides response to the request.",
-          "parameters": [
-            {
-              "name": "requestId",
-              "description": "An id the client received in requestPaused event.",
-              "$ref": "RequestId"
-            },
-            {
-              "name": "responseCode",
-              "description": "An HTTP response code.",
-              "type": "integer"
-            },
-            {
-              "name": "responseHeaders",
-              "description": "Response headers.",
-              "optional": true,
-              "type": "array",
-              "items": {
-                "$ref": "HeaderEntry"
-              }
-            },
-            {
-              "name": "binaryResponseHeaders",
-              "description": "Alternative way of specifying response headers as a \\0-separated\nseries of name: value pairs. Prefer the above method unless you\nneed to represent some non-UTF8 values that can't be transmitted\nover the protocol as text.",
-              "optional": true,
-              "type": "binary"
-            },
-            {
-              "name": "body",
-              "description": "A response body. If absent, original response body will be used if\nthe request is intercepted at the response stage and empty body\nwill be used if the request is intercepted at the request stage.",
-              "optional": true,
-              "type": "binary"
-            },
-            {
-              "name": "responsePhrase",
-              "description": "A textual representation of responseCode.\nIf absent, a standard phrase matching responseCode is used.",
-              "optional": true,
-              "type": "string"
-            }
-          ]
-        },
-        {
-          "name": "continueRequest",
-          "description": "Continues the request, optionally modifying some of its parameters.",
-          "parameters": [
-            {
-              "name": "requestId",
-              "description": "An id the client received in requestPaused event.",
-              "$ref": "RequestId"
-            },
-            {
-              "name": "url",
-              "description": "If set, the request url will be modified in a way that's not observable by page.",
-              "optional": true,
-              "type": "string"
-            },
-            {
-              "name": "method",
-              "description": "If set, the request method is overridden.",
-              "optional": true,
-              "type": "string"
-            },
-            {
-              "name": "postData",
-              "description": "If set, overrides the post data in the request.",
-              "optional": true,
-              "type": "binary"
-            },
-            {
-              "name": "headers",
-              "description": "If set, overrides the request headers. Note that the overrides do not\nextend to subsequent redirect hops, if a redirect happens. Another override\nmay be applied to a different request produced by a redirect.",
-              "optional": true,
-              "type": "array",
-              "items": {
-                "$ref": "HeaderEntry"
-              }
-            },
-            {
-              "name": "interceptResponse",
-              "description": "If set, overrides response interception behavior for this request.",
-              "experimental": true,
-              "optional": true,
-              "type": "boolean"
-            }
-          ]
-        },
-        {
-          "name": "continueWithAuth",
-          "description": "Continues a request supplying authChallengeResponse following authRequired event.",
-          "parameters": [
-            {
-              "name": "requestId",
-              "description": "An id the client received in authRequired event.",
-              "$ref": "RequestId"
-            },
-            {
-              "name": "authChallengeResponse",
-              "description": "Response to  with an authChallenge.",
-              "$ref": "AuthChallengeResponse"
-            }
-          ]
-        },
-        {
-          "name": "continueResponse",
-          "description": "Continues loading of the paused response, optionally modifying the\nresponse headers. If either responseCode or headers are modified, all of them\nmust be present.",
-          "experimental": true,
-          "parameters": [
-            {
-              "name": "requestId",
-              "description": "An id the client received in requestPaused event.",
-              "$ref": "RequestId"
-            },
-            {
-              "name": "responseCode",
-              "description": "An HTTP response code. If absent, original response code will be used.",
-              "optional": true,
-              "type": "integer"
-            },
-            {
-              "name": "responsePhrase",
-              "description": "A textual representation of responseCode.\nIf absent, a standard phrase matching responseCode is used.",
-              "optional": true,
-              "type": "string"
-            },
-            {
-              "name": "responseHeaders",
-              "description": "Response headers. If absent, original response headers will be used.",
-              "optional": true,
-              "type": "array",
-              "items": {
-                "$ref": "HeaderEntry"
-              }
-            },
-            {
-              "name": "binaryResponseHeaders",
-              "description": "Alternative way of specifying response headers as a \\0-separated\nseries of name: value pairs. Prefer the above method unless you\nneed to represent some non-UTF8 values that can't be transmitted\nover the protocol as text.",
-              "optional": true,
-              "type": "binary"
-            }
-          ]
-        },
-        {
-          "name": "getResponseBody",
-          "description": "Causes the body of the response to be received from the server and\nreturned as a single string. May only be issued for a request that\nis paused in the Response stage and is mutually exclusive with\ntakeResponseBodyForInterceptionAsStream. Calling other methods that\naffect the request or disabling fetch domain before body is received\nresults in an undefined behavior.\nNote that the response body is not available for redirects. Requests\npaused in the _redirect received_ state may be differentiated by\n`responseCode` and presence of `location` response header, see\ncomments to `requestPaused` for details.",
-          "parameters": [
-            {
-              "name": "requestId",
-              "description": "Identifier for the intercepted request to get body for.",
-              "$ref": "RequestId"
-            }
-          ],
-          "returns": [
-            {
-              "name": "body",
-              "description": "Response body.",
-              "type": "string"
-            },
-            {
-              "name": "base64Encoded",
-              "description": "True, if content was sent as base64.",
-              "type": "boolean"
-            }
-          ]
-        },
-        {
-          "name": "takeResponseBodyAsStream",
-          "description": "Returns a handle to the stream representing the response body.\nThe request must be paused in the HeadersReceived stage.\nNote that after this command the request can't be continued\nas is -- client either needs to cancel it or to provide the\nresponse body.\nThe stream only supports sequential read, IO.read will fail if the position\nis specified.\nThis method is mutually exclusive with getResponseBody.\nCalling other methods that affect the request or disabling fetch\ndomain before body is received results in an undefined behavior.",
-          "parameters": [
-            {
-              "name": "requestId",
-              "$ref": "RequestId"
-            }
-          ],
-          "returns": [
-            {
-              "name": "stream",
-              "$ref": "IO.StreamHandle"
-            }
-          ]
-        }
-      ],
-      "events": [
-        {
-          "name": "requestPaused",
-          "description": "Issued when the domain is enabled and the request URL matches the\nspecified filter. The request is paused until the client responds\nwith one of continueRequest, failRequest or fulfillRequest.\nThe stage of the request can be determined by presence of responseErrorReason\nand responseStatusCode -- the request is at the response stage if either\nof these fields is present and in the request stage otherwise.\nRedirect responses and subsequent requests are reported similarly to regular\nresponses and requests. Redirect responses may be distinguished by the value\nof `responseStatusCode` (which is one of 301, 302, 303, 307, 308) along with\npresence of the `location` header. Requests resulting from a redirect will\nhave `redirectedRequestId` field set.",
-          "parameters": [
-            {
-              "name": "requestId",
-              "description": "Each request the page makes will have a unique id.",
-              "$ref": "RequestId"
-            },
-            {
-              "name": "request",
-              "description": "The details of the request.",
-              "$ref": "Network.Request"
-            },
-            {
-              "name": "frameId",
-              "description": "The id of the frame that initiated the request.",
-              "$ref": "Page.FrameId"
-            },
-            {
-              "name": "resourceType",
-              "description": "How the requested resource will be used.",
-              "$ref": "Network.ResourceType"
-            },
-            {
-              "name": "responseErrorReason",
-              "description": "Response error if intercepted at response stage.",
-              "optional": true,
-              "$ref": "Network.ErrorReason"
-            },
-            {
-              "name": "responseStatusCode",
-              "description": "Response code if intercepted at response stage.",
-              "optional": true,
-              "type": "integer"
-            },
-            {
-              "name": "responseStatusText",
-              "description": "Response status text if intercepted at response stage.",
-              "optional": true,
-              "type": "string"
-            },
-            {
-              "name": "responseHeaders",
-              "description": "Response headers if intercepted at the response stage.",
-              "optional": true,
-              "type": "array",
-              "items": {
-                "$ref": "HeaderEntry"
-              }
-            },
-            {
-              "name": "networkId",
-              "description": "If the intercepted request had a corresponding Network.requestWillBeSent event fired for it,\nthen this networkId will be the same as the requestId present in the requestWillBeSent event.",
-              "optional": true,
-              "$ref": "Network.RequestId"
-            },
-            {
-              "name": "redirectedRequestId",
-              "description": "If the request is due to a redirect response from the server, the id of the request that\nhas caused the redirect.",
-              "experimental": true,
-              "optional": true,
-              "$ref": "RequestId"
-            }
-          ]
-        },
-        {
-          "name": "authRequired",
-          "description": "Issued when the domain is enabled with handleAuthRequests set to true.\nThe request is paused until client responds with continueWithAuth.",
-          "parameters": [
-            {
-              "name": "requestId",
-              "description": "Each request the page makes will have a unique id.",
-              "$ref": "RequestId"
-            },
-            {
-              "name": "request",
-              "description": "The details of the request.",
-              "$ref": "Network.Request"
-            },
-            {
-              "name": "frameId",
-              "description": "The id of the frame that initiated the request.",
-              "$ref": "Page.FrameId"
-            },
-            {
-              "name": "resourceType",
-              "description": "How the requested resource will be used.",
-              "$ref": "Network.ResourceType"
-            },
-            {
-              "name": "authChallenge",
-              "description": "Details of the Authorization Challenge encountered.\nIf this is set, client should respond with continueRequest that\ncontains AuthChallengeResponse.",
-              "$ref": "AuthChallenge"
-            }
-          ]
-        }
-      ]
-    },
-    {
       "domain": "WebAudio",
       "description": "This domain allows inspection of Web Audio API.\nhttps://webaudio.github.io/web-audio-api/",
       "experimental": true,
@@ -27522,1630 +29370,6 @@
             }
           ]
         }
-      ]
-    },
-    {
-      "domain": "Media",
-      "description": "This domain allows detailed inspection of media elements",
-      "experimental": true,
-      "types": [
-        {
-          "id": "PlayerId",
-          "description": "Players will get an ID that is unique within the agent context.",
-          "type": "string"
-        },
-        {
-          "id": "Timestamp",
-          "type": "number"
-        },
-        {
-          "id": "PlayerMessage",
-          "description": "Have one type per entry in MediaLogRecord::Type\nCorresponds to kMessage",
-          "type": "object",
-          "properties": [
-            {
-              "name": "level",
-              "description": "Keep in sync with MediaLogMessageLevel\nWe are currently keeping the message level 'error' separate from the\nPlayerError type because right now they represent different things,\nthis one being a DVLOG(ERROR) style log message that gets printed\nbased on what log level is selected in the UI, and the other is a\nrepresentation of a media::PipelineStatus object. Soon however we're\ngoing to be moving away from using PipelineStatus for errors and\nintroducing a new error type which should hopefully let us integrate\nthe error log level into the PlayerError type.",
-              "type": "string",
-              "enum": [
-                "error",
-                "warning",
-                "info",
-                "debug"
-              ]
-            },
-            {
-              "name": "message",
-              "type": "string"
-            }
-          ]
-        },
-        {
-          "id": "PlayerProperty",
-          "description": "Corresponds to kMediaPropertyChange",
-          "type": "object",
-          "properties": [
-            {
-              "name": "name",
-              "type": "string"
-            },
-            {
-              "name": "value",
-              "type": "string"
-            }
-          ]
-        },
-        {
-          "id": "PlayerEvent",
-          "description": "Corresponds to kMediaEventTriggered",
-          "type": "object",
-          "properties": [
-            {
-              "name": "timestamp",
-              "$ref": "Timestamp"
-            },
-            {
-              "name": "value",
-              "type": "string"
-            }
-          ]
-        },
-        {
-          "id": "PlayerErrorSourceLocation",
-          "description": "Represents logged source line numbers reported in an error.\nNOTE: file and line are from chromium c++ implementation code, not js.",
-          "type": "object",
-          "properties": [
-            {
-              "name": "file",
-              "type": "string"
-            },
-            {
-              "name": "line",
-              "type": "integer"
-            }
-          ]
-        },
-        {
-          "id": "PlayerError",
-          "description": "Corresponds to kMediaError",
-          "type": "object",
-          "properties": [
-            {
-              "name": "errorType",
-              "type": "string"
-            },
-            {
-              "name": "code",
-              "description": "Code is the numeric enum entry for a specific set of error codes, such\nas PipelineStatusCodes in media/base/pipeline_status.h",
-              "type": "integer"
-            },
-            {
-              "name": "stack",
-              "description": "A trace of where this error was caused / where it passed through.",
-              "type": "array",
-              "items": {
-                "$ref": "PlayerErrorSourceLocation"
-              }
-            },
-            {
-              "name": "cause",
-              "description": "Errors potentially have a root cause error, ie, a DecoderError might be\ncaused by an WindowsError",
-              "type": "array",
-              "items": {
-                "$ref": "PlayerError"
-              }
-            },
-            {
-              "name": "data",
-              "description": "Extra data attached to an error, such as an HRESULT, Video Codec, etc.",
-              "type": "object"
-            }
-          ]
-        }
-      ],
-      "events": [
-        {
-          "name": "playerPropertiesChanged",
-          "description": "This can be called multiple times, and can be used to set / override /\nremove player properties. A null propValue indicates removal.",
-          "parameters": [
-            {
-              "name": "playerId",
-              "$ref": "PlayerId"
-            },
-            {
-              "name": "properties",
-              "type": "array",
-              "items": {
-                "$ref": "PlayerProperty"
-              }
-            }
-          ]
-        },
-        {
-          "name": "playerEventsAdded",
-          "description": "Send events as a list, allowing them to be batched on the browser for less\ncongestion. If batched, events must ALWAYS be in chronological order.",
-          "parameters": [
-            {
-              "name": "playerId",
-              "$ref": "PlayerId"
-            },
-            {
-              "name": "events",
-              "type": "array",
-              "items": {
-                "$ref": "PlayerEvent"
-              }
-            }
-          ]
-        },
-        {
-          "name": "playerMessagesLogged",
-          "description": "Send a list of any messages that need to be delivered.",
-          "parameters": [
-            {
-              "name": "playerId",
-              "$ref": "PlayerId"
-            },
-            {
-              "name": "messages",
-              "type": "array",
-              "items": {
-                "$ref": "PlayerMessage"
-              }
-            }
-          ]
-        },
-        {
-          "name": "playerErrorsRaised",
-          "description": "Send a list of any errors that need to be delivered.",
-          "parameters": [
-            {
-              "name": "playerId",
-              "$ref": "PlayerId"
-            },
-            {
-              "name": "errors",
-              "type": "array",
-              "items": {
-                "$ref": "PlayerError"
-              }
-            }
-          ]
-        },
-        {
-          "name": "playersCreated",
-          "description": "Called whenever a player is created, or when a new agent joins and receives\na list of active players. If an agent is restored, it will receive the full\nlist of player ids and all events again.",
-          "parameters": [
-            {
-              "name": "players",
-              "type": "array",
-              "items": {
-                "$ref": "PlayerId"
-              }
-            }
-          ]
-        }
-      ],
-      "commands": [
-        {
-          "name": "enable",
-          "description": "Enables the Media domain"
-        },
-        {
-          "name": "disable",
-          "description": "Disables the Media domain."
-        }
-      ]
-    },
-    {
-      "domain": "DeviceAccess",
-      "experimental": true,
-      "types": [
-        {
-          "id": "RequestId",
-          "description": "Device request id.",
-          "type": "string"
-        },
-        {
-          "id": "DeviceId",
-          "description": "A device id.",
-          "type": "string"
-        },
-        {
-          "id": "PromptDevice",
-          "description": "Device information displayed in a user prompt to select a device.",
-          "type": "object",
-          "properties": [
-            {
-              "name": "id",
-              "$ref": "DeviceId"
-            },
-            {
-              "name": "name",
-              "description": "Display name as it appears in a device request user prompt.",
-              "type": "string"
-            }
-          ]
-        }
-      ],
-      "commands": [
-        {
-          "name": "enable",
-          "description": "Enable events in this domain."
-        },
-        {
-          "name": "disable",
-          "description": "Disable events in this domain."
-        },
-        {
-          "name": "selectPrompt",
-          "description": "Select a device in response to a DeviceAccess.deviceRequestPrompted event.",
-          "parameters": [
-            {
-              "name": "id",
-              "$ref": "RequestId"
-            },
-            {
-              "name": "deviceId",
-              "$ref": "DeviceId"
-            }
-          ]
-        },
-        {
-          "name": "cancelPrompt",
-          "description": "Cancel a prompt in response to a DeviceAccess.deviceRequestPrompted event.",
-          "parameters": [
-            {
-              "name": "id",
-              "$ref": "RequestId"
-            }
-          ]
-        }
-      ],
-      "events": [
-        {
-          "name": "deviceRequestPrompted",
-          "description": "A device request opened a user prompt to select a device. Respond with the\nselectPrompt or cancelPrompt command.",
-          "parameters": [
-            {
-              "name": "id",
-              "$ref": "RequestId"
-            },
-            {
-              "name": "devices",
-              "type": "array",
-              "items": {
-                "$ref": "PromptDevice"
-              }
-            }
-          ]
-        }
-      ]
-    },
-    {
-      "domain": "Preload",
-      "experimental": true,
-      "types": [
-        {
-          "id": "RuleSetId",
-          "description": "Unique id",
-          "type": "string"
-        },
-        {
-          "id": "RuleSet",
-          "description": "Corresponds to SpeculationRuleSet",
-          "type": "object",
-          "properties": [
-            {
-              "name": "id",
-              "$ref": "RuleSetId"
-            },
-            {
-              "name": "loaderId",
-              "description": "Identifies a document which the rule set is associated with.",
-              "$ref": "Network.LoaderId"
-            },
-            {
-              "name": "sourceText",
-              "description": "Source text of JSON representing the rule set. If it comes from\n`<script>` tag, it is the textContent of the node. Note that it is\na JSON for valid case.\n\nSee also:\n- https://wicg.github.io/nav-speculation/speculation-rules.html\n- https://github.com/WICG/nav-speculation/blob/main/triggers.md",
-              "type": "string"
-            },
-            {
-              "name": "backendNodeId",
-              "description": "A speculation rule set is either added through an inline\n`<script>` tag or through an external resource via the\n'Speculation-Rules' HTTP header. For the first case, we include\nthe BackendNodeId of the relevant `<script>` tag. For the second\ncase, we include the external URL where the rule set was loaded\nfrom, and also RequestId if Network domain is enabled.\n\nSee also:\n- https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-script\n- https://wicg.github.io/nav-speculation/speculation-rules.html#speculation-rules-header",
-              "optional": true,
-              "$ref": "DOM.BackendNodeId"
-            },
-            {
-              "name": "url",
-              "optional": true,
-              "type": "string"
-            },
-            {
-              "name": "requestId",
-              "optional": true,
-              "$ref": "Network.RequestId"
-            },
-            {
-              "name": "errorType",
-              "description": "Error information\n`errorMessage` is null iff `errorType` is null.",
-              "optional": true,
-              "$ref": "RuleSetErrorType"
-            },
-            {
-              "name": "errorMessage",
-              "description": "TODO(https://crbug.com/1425354): Replace this property with structured error.",
-              "deprecated": true,
-              "optional": true,
-              "type": "string"
-            }
-          ]
-        },
-        {
-          "id": "RuleSetErrorType",
-          "type": "string",
-          "enum": [
-            "SourceIsNotJsonObject",
-            "InvalidRulesSkipped",
-            "InvalidRulesetLevelTag"
-          ]
-        },
-        {
-          "id": "SpeculationAction",
-          "description": "The type of preloading attempted. It corresponds to\nmojom::SpeculationAction (although PrefetchWithSubresources is omitted as it\nisn't being used by clients).",
-          "type": "string",
-          "enum": [
-            "Prefetch",
-            "Prerender"
-          ]
-        },
-        {
-          "id": "SpeculationTargetHint",
-          "description": "Corresponds to mojom::SpeculationTargetHint.\nSee https://github.com/WICG/nav-speculation/blob/main/triggers.md#window-name-targeting-hints",
-          "type": "string",
-          "enum": [
-            "Blank",
-            "Self"
-          ]
-        },
-        {
-          "id": "PreloadingAttemptKey",
-          "description": "A key that identifies a preloading attempt.\n\nThe url used is the url specified by the trigger (i.e. the initial URL), and\nnot the final url that is navigated to. For example, prerendering allows\nsame-origin main frame navigations during the attempt, but the attempt is\nstill keyed with the initial URL.",
-          "type": "object",
-          "properties": [
-            {
-              "name": "loaderId",
-              "$ref": "Network.LoaderId"
-            },
-            {
-              "name": "action",
-              "$ref": "SpeculationAction"
-            },
-            {
-              "name": "url",
-              "type": "string"
-            },
-            {
-              "name": "targetHint",
-              "optional": true,
-              "$ref": "SpeculationTargetHint"
-            }
-          ]
-        },
-        {
-          "id": "PreloadingAttemptSource",
-          "description": "Lists sources for a preloading attempt, specifically the ids of rule sets\nthat had a speculation rule that triggered the attempt, and the\nBackendNodeIds of <a href> or <area href> elements that triggered the\nattempt (in the case of attempts triggered by a document rule). It is\npossible for multiple rule sets and links to trigger a single attempt.",
-          "type": "object",
-          "properties": [
-            {
-              "name": "key",
-              "$ref": "PreloadingAttemptKey"
-            },
-            {
-              "name": "ruleSetIds",
-              "type": "array",
-              "items": {
-                "$ref": "RuleSetId"
-              }
-            },
-            {
-              "name": "nodeIds",
-              "type": "array",
-              "items": {
-                "$ref": "DOM.BackendNodeId"
-              }
-            }
-          ]
-        },
-        {
-          "id": "PreloadPipelineId",
-          "description": "Chrome manages different types of preloads together using a\nconcept of preloading pipeline. For example, if a site uses a\nSpeculationRules for prerender, Chrome first starts a prefetch and\nthen upgrades it to prerender.\n\nCDP events for them are emitted separately but they share\n`PreloadPipelineId`.",
-          "type": "string"
-        },
-        {
-          "id": "PrerenderFinalStatus",
-          "description": "List of FinalStatus reasons for Prerender2.",
-          "type": "string",
-          "enum": [
-            "Activated",
-            "Destroyed",
-            "LowEndDevice",
-            "InvalidSchemeRedirect",
-            "InvalidSchemeNavigation",
-            "NavigationRequestBlockedByCsp",
-            "MojoBinderPolicy",
-            "RendererProcessCrashed",
-            "RendererProcessKilled",
-            "Download",
-            "TriggerDestroyed",
-            "NavigationNotCommitted",
-            "NavigationBadHttpStatus",
-            "ClientCertRequested",
-            "NavigationRequestNetworkError",
-            "CancelAllHostsForTesting",
-            "DidFailLoad",
-            "Stop",
-            "SslCertificateError",
-            "LoginAuthRequested",
-            "UaChangeRequiresReload",
-            "BlockedByClient",
-            "AudioOutputDeviceRequested",
-            "MixedContent",
-            "TriggerBackgrounded",
-            "MemoryLimitExceeded",
-            "DataSaverEnabled",
-            "TriggerUrlHasEffectiveUrl",
-            "ActivatedBeforeStarted",
-            "InactivePageRestriction",
-            "StartFailed",
-            "TimeoutBackgrounded",
-            "CrossSiteRedirectInInitialNavigation",
-            "CrossSiteNavigationInInitialNavigation",
-            "SameSiteCrossOriginRedirectNotOptInInInitialNavigation",
-            "SameSiteCrossOriginNavigationNotOptInInInitialNavigation",
-            "ActivationNavigationParameterMismatch",
-            "ActivatedInBackground",
-            "EmbedderHostDisallowed",
-            "ActivationNavigationDestroyedBeforeSuccess",
-            "TabClosedByUserGesture",
-            "TabClosedWithoutUserGesture",
-            "PrimaryMainFrameRendererProcessCrashed",
-            "PrimaryMainFrameRendererProcessKilled",
-            "ActivationFramePolicyNotCompatible",
-            "PreloadingDisabled",
-            "BatterySaverEnabled",
-            "ActivatedDuringMainFrameNavigation",
-            "PreloadingUnsupportedByWebContents",
-            "CrossSiteRedirectInMainFrameNavigation",
-            "CrossSiteNavigationInMainFrameNavigation",
-            "SameSiteCrossOriginRedirectNotOptInInMainFrameNavigation",
-            "SameSiteCrossOriginNavigationNotOptInInMainFrameNavigation",
-            "MemoryPressureOnTrigger",
-            "MemoryPressureAfterTriggered",
-            "PrerenderingDisabledByDevTools",
-            "SpeculationRuleRemoved",
-            "ActivatedWithAuxiliaryBrowsingContexts",
-            "MaxNumOfRunningEagerPrerendersExceeded",
-            "MaxNumOfRunningNonEagerPrerendersExceeded",
-            "MaxNumOfRunningEmbedderPrerendersExceeded",
-            "PrerenderingUrlHasEffectiveUrl",
-            "RedirectedPrerenderingUrlHasEffectiveUrl",
-            "ActivationUrlHasEffectiveUrl",
-            "JavaScriptInterfaceAdded",
-            "JavaScriptInterfaceRemoved",
-            "AllPrerenderingCanceled",
-            "WindowClosed",
-            "SlowNetwork",
-            "OtherPrerenderedPageActivated",
-            "V8OptimizerDisabled",
-            "PrerenderFailedDuringPrefetch",
-            "BrowsingDataRemoved",
-            "PrerenderHostReused"
-          ]
-        },
-        {
-          "id": "PreloadingStatus",
-          "description": "Preloading status values, see also PreloadingTriggeringOutcome. This\nstatus is shared by prefetchStatusUpdated and prerenderStatusUpdated.",
-          "type": "string",
-          "enum": [
-            "Pending",
-            "Running",
-            "Ready",
-            "Success",
-            "Failure",
-            "NotSupported"
-          ]
-        },
-        {
-          "id": "PrefetchStatus",
-          "description": "TODO(https://crbug.com/1384419): revisit the list of PrefetchStatus and\nfilter out the ones that aren't necessary to the developers.",
-          "type": "string",
-          "enum": [
-            "PrefetchAllowed",
-            "PrefetchFailedIneligibleRedirect",
-            "PrefetchFailedInvalidRedirect",
-            "PrefetchFailedMIMENotSupported",
-            "PrefetchFailedNetError",
-            "PrefetchFailedNon2XX",
-            "PrefetchEvictedAfterBrowsingDataRemoved",
-            "PrefetchEvictedAfterCandidateRemoved",
-            "PrefetchEvictedForNewerPrefetch",
-            "PrefetchHeldback",
-            "PrefetchIneligibleRetryAfter",
-            "PrefetchIsPrivacyDecoy",
-            "PrefetchIsStale",
-            "PrefetchNotEligibleBrowserContextOffTheRecord",
-            "PrefetchNotEligibleDataSaverEnabled",
-            "PrefetchNotEligibleExistingProxy",
-            "PrefetchNotEligibleHostIsNonUnique",
-            "PrefetchNotEligibleNonDefaultStoragePartition",
-            "PrefetchNotEligibleSameSiteCrossOriginPrefetchRequiredProxy",
-            "PrefetchNotEligibleSchemeIsNotHttps",
-            "PrefetchNotEligibleUserHasCookies",
-            "PrefetchNotEligibleUserHasServiceWorker",
-            "PrefetchNotEligibleUserHasServiceWorkerNoFetchHandler",
-            "PrefetchNotEligibleRedirectFromServiceWorker",
-            "PrefetchNotEligibleRedirectToServiceWorker",
-            "PrefetchNotEligibleBatterySaverEnabled",
-            "PrefetchNotEligiblePreloadingDisabled",
-            "PrefetchNotFinishedInTime",
-            "PrefetchNotStarted",
-            "PrefetchNotUsedCookiesChanged",
-            "PrefetchProxyNotAvailable",
-            "PrefetchResponseUsed",
-            "PrefetchSuccessfulButNotUsed",
-            "PrefetchNotUsedProbeFailed"
-          ]
-        },
-        {
-          "id": "PrerenderMismatchedHeaders",
-          "description": "Information of headers to be displayed when the header mismatch occurred.",
-          "type": "object",
-          "properties": [
-            {
-              "name": "headerName",
-              "type": "string"
-            },
-            {
-              "name": "initialValue",
-              "optional": true,
-              "type": "string"
-            },
-            {
-              "name": "activationValue",
-              "optional": true,
-              "type": "string"
-            }
-          ]
-        }
-      ],
-      "commands": [
-        {
-          "name": "enable"
-        },
-        {
-          "name": "disable"
-        }
-      ],
-      "events": [
-        {
-          "name": "ruleSetUpdated",
-          "description": "Upsert. Currently, it is only emitted when a rule set added.",
-          "parameters": [
-            {
-              "name": "ruleSet",
-              "$ref": "RuleSet"
-            }
-          ]
-        },
-        {
-          "name": "ruleSetRemoved",
-          "parameters": [
-            {
-              "name": "id",
-              "$ref": "RuleSetId"
-            }
-          ]
-        },
-        {
-          "name": "preloadEnabledStateUpdated",
-          "description": "Fired when a preload enabled state is updated.",
-          "parameters": [
-            {
-              "name": "disabledByPreference",
-              "type": "boolean"
-            },
-            {
-              "name": "disabledByDataSaver",
-              "type": "boolean"
-            },
-            {
-              "name": "disabledByBatterySaver",
-              "type": "boolean"
-            },
-            {
-              "name": "disabledByHoldbackPrefetchSpeculationRules",
-              "type": "boolean"
-            },
-            {
-              "name": "disabledByHoldbackPrerenderSpeculationRules",
-              "type": "boolean"
-            }
-          ]
-        },
-        {
-          "name": "prefetchStatusUpdated",
-          "description": "Fired when a prefetch attempt is updated.",
-          "parameters": [
-            {
-              "name": "key",
-              "$ref": "PreloadingAttemptKey"
-            },
-            {
-              "name": "pipelineId",
-              "$ref": "PreloadPipelineId"
-            },
-            {
-              "name": "initiatingFrameId",
-              "description": "The frame id of the frame initiating prefetch.",
-              "$ref": "Page.FrameId"
-            },
-            {
-              "name": "prefetchUrl",
-              "type": "string"
-            },
-            {
-              "name": "status",
-              "$ref": "PreloadingStatus"
-            },
-            {
-              "name": "prefetchStatus",
-              "$ref": "PrefetchStatus"
-            },
-            {
-              "name": "requestId",
-              "$ref": "Network.RequestId"
-            }
-          ]
-        },
-        {
-          "name": "prerenderStatusUpdated",
-          "description": "Fired when a prerender attempt is updated.",
-          "parameters": [
-            {
-              "name": "key",
-              "$ref": "PreloadingAttemptKey"
-            },
-            {
-              "name": "pipelineId",
-              "$ref": "PreloadPipelineId"
-            },
-            {
-              "name": "status",
-              "$ref": "PreloadingStatus"
-            },
-            {
-              "name": "prerenderStatus",
-              "optional": true,
-              "$ref": "PrerenderFinalStatus"
-            },
-            {
-              "name": "disallowedMojoInterface",
-              "description": "This is used to give users more information about the name of Mojo interface\nthat is incompatible with prerender and has caused the cancellation of the attempt.",
-              "optional": true,
-              "type": "string"
-            },
-            {
-              "name": "mismatchedHeaders",
-              "optional": true,
-              "type": "array",
-              "items": {
-                "$ref": "PrerenderMismatchedHeaders"
-              }
-            }
-          ]
-        },
-        {
-          "name": "preloadingAttemptSourcesUpdated",
-          "description": "Send a list of sources for all preloading attempts in a document.",
-          "parameters": [
-            {
-              "name": "loaderId",
-              "$ref": "Network.LoaderId"
-            },
-            {
-              "name": "preloadingAttemptSources",
-              "type": "array",
-              "items": {
-                "$ref": "PreloadingAttemptSource"
-              }
-            }
-          ]
-        }
-      ]
-    },
-    {
-      "domain": "FedCm",
-      "description": "This domain allows interacting with the FedCM dialog.",
-      "experimental": true,
-      "types": [
-        {
-          "id": "LoginState",
-          "description": "Whether this is a sign-up or sign-in action for this account, i.e.\nwhether this account has ever been used to sign in to this RP before.",
-          "type": "string",
-          "enum": [
-            "SignIn",
-            "SignUp"
-          ]
-        },
-        {
-          "id": "DialogType",
-          "description": "The types of FedCM dialogs.",
-          "type": "string",
-          "enum": [
-            "AccountChooser",
-            "AutoReauthn",
-            "ConfirmIdpLogin",
-            "Error"
-          ]
-        },
-        {
-          "id": "DialogButton",
-          "description": "The buttons on the FedCM dialog.",
-          "type": "string",
-          "enum": [
-            "ConfirmIdpLoginContinue",
-            "ErrorGotIt",
-            "ErrorMoreDetails"
-          ]
-        },
-        {
-          "id": "AccountUrlType",
-          "description": "The URLs that each account has",
-          "type": "string",
-          "enum": [
-            "TermsOfService",
-            "PrivacyPolicy"
-          ]
-        },
-        {
-          "id": "Account",
-          "description": "Corresponds to IdentityRequestAccount",
-          "type": "object",
-          "properties": [
-            {
-              "name": "accountId",
-              "type": "string"
-            },
-            {
-              "name": "email",
-              "type": "string"
-            },
-            {
-              "name": "name",
-              "type": "string"
-            },
-            {
-              "name": "givenName",
-              "type": "string"
-            },
-            {
-              "name": "pictureUrl",
-              "type": "string"
-            },
-            {
-              "name": "idpConfigUrl",
-              "type": "string"
-            },
-            {
-              "name": "idpLoginUrl",
-              "type": "string"
-            },
-            {
-              "name": "loginState",
-              "$ref": "LoginState"
-            },
-            {
-              "name": "termsOfServiceUrl",
-              "description": "These two are only set if the loginState is signUp",
-              "optional": true,
-              "type": "string"
-            },
-            {
-              "name": "privacyPolicyUrl",
-              "optional": true,
-              "type": "string"
-            }
-          ]
-        }
-      ],
-      "events": [
-        {
-          "name": "dialogShown",
-          "parameters": [
-            {
-              "name": "dialogId",
-              "type": "string"
-            },
-            {
-              "name": "dialogType",
-              "$ref": "DialogType"
-            },
-            {
-              "name": "accounts",
-              "type": "array",
-              "items": {
-                "$ref": "Account"
-              }
-            },
-            {
-              "name": "title",
-              "description": "These exist primarily so that the caller can verify the\nRP context was used appropriately.",
-              "type": "string"
-            },
-            {
-              "name": "subtitle",
-              "optional": true,
-              "type": "string"
-            }
-          ]
-        },
-        {
-          "name": "dialogClosed",
-          "description": "Triggered when a dialog is closed, either by user action, JS abort,\nor a command below.",
-          "parameters": [
-            {
-              "name": "dialogId",
-              "type": "string"
-            }
-          ]
-        }
-      ],
-      "commands": [
-        {
-          "name": "enable",
-          "parameters": [
-            {
-              "name": "disableRejectionDelay",
-              "description": "Allows callers to disable the promise rejection delay that would\nnormally happen, if this is unimportant to what's being tested.\n(step 4 of https://fedidcg.github.io/FedCM/#browser-api-rp-sign-in)",
-              "optional": true,
-              "type": "boolean"
-            }
-          ]
-        },
-        {
-          "name": "disable"
-        },
-        {
-          "name": "selectAccount",
-          "parameters": [
-            {
-              "name": "dialogId",
-              "type": "string"
-            },
-            {
-              "name": "accountIndex",
-              "type": "integer"
-            }
-          ]
-        },
-        {
-          "name": "clickDialogButton",
-          "parameters": [
-            {
-              "name": "dialogId",
-              "type": "string"
-            },
-            {
-              "name": "dialogButton",
-              "$ref": "DialogButton"
-            }
-          ]
-        },
-        {
-          "name": "openUrl",
-          "parameters": [
-            {
-              "name": "dialogId",
-              "type": "string"
-            },
-            {
-              "name": "accountIndex",
-              "type": "integer"
-            },
-            {
-              "name": "accountUrlType",
-              "$ref": "AccountUrlType"
-            }
-          ]
-        },
-        {
-          "name": "dismissDialog",
-          "parameters": [
-            {
-              "name": "dialogId",
-              "type": "string"
-            },
-            {
-              "name": "triggerCooldown",
-              "optional": true,
-              "type": "boolean"
-            }
-          ]
-        },
-        {
-          "name": "resetCooldown",
-          "description": "Resets the cooldown time, if any, to allow the next FedCM call to show\na dialog even if one was recently dismissed by the user."
-        }
-      ]
-    },
-    {
-      "domain": "PWA",
-      "description": "This domain allows interacting with the browser to control PWAs.",
-      "experimental": true,
-      "types": [
-        {
-          "id": "FileHandlerAccept",
-          "description": "The following types are the replica of\nhttps://crsrc.org/c/chrome/browser/web_applications/proto/web_app_os_integration_state.proto;drc=9910d3be894c8f142c977ba1023f30a656bc13fc;l=67",
-          "type": "object",
-          "properties": [
-            {
-              "name": "mediaType",
-              "description": "New name of the mimetype according to\nhttps://www.iana.org/assignments/media-types/media-types.xhtml",
-              "type": "string"
-            },
-            {
-              "name": "fileExtensions",
-              "type": "array",
-              "items": {
-                "type": "string"
-              }
-            }
-          ]
-        },
-        {
-          "id": "FileHandler",
-          "type": "object",
-          "properties": [
-            {
-              "name": "action",
-              "type": "string"
-            },
-            {
-              "name": "accepts",
-              "type": "array",
-              "items": {
-                "$ref": "FileHandlerAccept"
-              }
-            },
-            {
-              "name": "displayName",
-              "type": "string"
-            }
-          ]
-        },
-        {
-          "id": "DisplayMode",
-          "description": "If user prefers opening the app in browser or an app window.",
-          "type": "string",
-          "enum": [
-            "standalone",
-            "browser"
-          ]
-        }
-      ],
-      "commands": [
-        {
-          "name": "getOsAppState",
-          "description": "Returns the following OS state for the given manifest id.",
-          "parameters": [
-            {
-              "name": "manifestId",
-              "description": "The id from the webapp's manifest file, commonly it's the url of the\nsite installing the webapp. See\nhttps://web.dev/learn/pwa/web-app-manifest.",
-              "type": "string"
-            }
-          ],
-          "returns": [
-            {
-              "name": "badgeCount",
-              "type": "integer"
-            },
-            {
-              "name": "fileHandlers",
-              "type": "array",
-              "items": {
-                "$ref": "FileHandler"
-              }
-            }
-          ]
-        },
-        {
-          "name": "install",
-          "description": "Installs the given manifest identity, optionally using the given installUrlOrBundleUrl\n\nIWA-specific install description:\nmanifestId corresponds to isolated-app:// + web_package::SignedWebBundleId\n\nFile installation mode:\nThe installUrlOrBundleUrl can be either file:// or http(s):// pointing\nto a signed web bundle (.swbn). In this case SignedWebBundleId must correspond to\nThe .swbn file's signing key.\n\nDev proxy installation mode:\ninstallUrlOrBundleUrl must be http(s):// that serves dev mode IWA.\nweb_package::SignedWebBundleId must be of type dev proxy.\n\nThe advantage of dev proxy mode is that all changes to IWA\nautomatically will be reflected in the running app without\nreinstallation.\n\nTo generate bundle id for proxy mode:\n1. Generate 32 random bytes.\n2. Add a specific suffix 0x00 at the end.\n3. Encode the entire sequence using Base32 without padding.\n\nIf Chrome is not in IWA dev\nmode, the installation will fail, regardless of the state of the allowlist.",
-          "parameters": [
-            {
-              "name": "manifestId",
-              "type": "string"
-            },
-            {
-              "name": "installUrlOrBundleUrl",
-              "description": "The location of the app or bundle overriding the one derived from the\nmanifestId.",
-              "optional": true,
-              "type": "string"
-            }
-          ]
-        },
-        {
-          "name": "uninstall",
-          "description": "Uninstalls the given manifest_id and closes any opened app windows.",
-          "parameters": [
-            {
-              "name": "manifestId",
-              "type": "string"
-            }
-          ]
-        },
-        {
-          "name": "launch",
-          "description": "Launches the installed web app, or an url in the same web app instead of the\ndefault start url if it is provided. Returns a page Target.TargetID which\ncan be used to attach to via Target.attachToTarget or similar APIs.",
-          "parameters": [
-            {
-              "name": "manifestId",
-              "type": "string"
-            },
-            {
-              "name": "url",
-              "optional": true,
-              "type": "string"
-            }
-          ],
-          "returns": [
-            {
-              "name": "targetId",
-              "description": "ID of the tab target created as a result.",
-              "$ref": "Target.TargetID"
-            }
-          ]
-        },
-        {
-          "name": "launchFilesInApp",
-          "description": "Opens one or more local files from an installed web app identified by its\nmanifestId. The web app needs to have file handlers registered to process\nthe files. The API returns one or more page Target.TargetIDs which can be\nused to attach to via Target.attachToTarget or similar APIs.\nIf some files in the parameters cannot be handled by the web app, they will\nbe ignored. If none of the files can be handled, this API returns an error.\nIf no files are provided as the parameter, this API also returns an error.\n\nAccording to the definition of the file handlers in the manifest file, one\nTarget.TargetID may represent a page handling one or more files. The order\nof the returned Target.TargetIDs is not guaranteed.\n\nTODO(crbug.com/339454034): Check the existences of the input files.",
-          "parameters": [
-            {
-              "name": "manifestId",
-              "type": "string"
-            },
-            {
-              "name": "files",
-              "type": "array",
-              "items": {
-                "type": "string"
-              }
-            }
-          ],
-          "returns": [
-            {
-              "name": "targetIds",
-              "description": "IDs of the tab targets created as the result.",
-              "type": "array",
-              "items": {
-                "$ref": "Target.TargetID"
-              }
-            }
-          ]
-        },
-        {
-          "name": "openCurrentPageInApp",
-          "description": "Opens the current page in its web app identified by the manifest id, needs\nto be called on a page target. This function returns immediately without\nwaiting for the app to finish loading.",
-          "parameters": [
-            {
-              "name": "manifestId",
-              "type": "string"
-            }
-          ]
-        },
-        {
-          "name": "changeAppUserSettings",
-          "description": "Changes user settings of the web app identified by its manifestId. If the\napp was not installed, this command returns an error. Unset parameters will\nbe ignored; unrecognized values will cause an error.\n\nUnlike the ones defined in the manifest files of the web apps, these\nsettings are provided by the browser and controlled by the users, they\nimpact the way the browser handling the web apps.\n\nSee the comment of each parameter.",
-          "parameters": [
-            {
-              "name": "manifestId",
-              "type": "string"
-            },
-            {
-              "name": "linkCapturing",
-              "description": "If user allows the links clicked on by the user in the app's scope, or\nextended scope if the manifest has scope extensions and the flags\n`DesktopPWAsLinkCapturingWithScopeExtensions` and\n`WebAppEnableScopeExtensions` are enabled.\n\nNote, the API does not support resetting the linkCapturing to the\ninitial value, uninstalling and installing the web app again will reset\nit.\n\nTODO(crbug.com/339453269): Setting this value on ChromeOS is not\nsupported yet.",
-              "optional": true,
-              "type": "boolean"
-            },
-            {
-              "name": "displayMode",
-              "optional": true,
-              "$ref": "DisplayMode"
-            }
-          ]
-        }
-      ]
-    },
-    {
-      "domain": "BluetoothEmulation",
-      "description": "This domain allows configuring virtual Bluetooth devices to test\nthe web-bluetooth API.",
-      "experimental": true,
-      "types": [
-        {
-          "id": "CentralState",
-          "description": "Indicates the various states of Central.",
-          "type": "string",
-          "enum": [
-            "absent",
-            "powered-off",
-            "powered-on"
-          ]
-        },
-        {
-          "id": "GATTOperationType",
-          "description": "Indicates the various types of GATT event.",
-          "type": "string",
-          "enum": [
-            "connection",
-            "discovery"
-          ]
-        },
-        {
-          "id": "CharacteristicWriteType",
-          "description": "Indicates the various types of characteristic write.",
-          "type": "string",
-          "enum": [
-            "write-default-deprecated",
-            "write-with-response",
-            "write-without-response"
-          ]
-        },
-        {
-          "id": "CharacteristicOperationType",
-          "description": "Indicates the various types of characteristic operation.",
-          "type": "string",
-          "enum": [
-            "read",
-            "write",
-            "subscribe-to-notifications",
-            "unsubscribe-from-notifications"
-          ]
-        },
-        {
-          "id": "DescriptorOperationType",
-          "description": "Indicates the various types of descriptor operation.",
-          "type": "string",
-          "enum": [
-            "read",
-            "write"
-          ]
-        },
-        {
-          "id": "ManufacturerData",
-          "description": "Stores the manufacturer data",
-          "type": "object",
-          "properties": [
-            {
-              "name": "key",
-              "description": "Company identifier\nhttps://bitbucket.org/bluetooth-SIG/public/src/main/assigned_numbers/company_identifiers/company_identifiers.yaml\nhttps://usb.org/developers",
-              "type": "integer"
-            },
-            {
-              "name": "data",
-              "description": "Manufacturer-specific data",
-              "type": "binary"
-            }
-          ]
-        },
-        {
-          "id": "ScanRecord",
-          "description": "Stores the byte data of the advertisement packet sent by a Bluetooth device.",
-          "type": "object",
-          "properties": [
-            {
-              "name": "name",
-              "optional": true,
-              "type": "string"
-            },
-            {
-              "name": "uuids",
-              "optional": true,
-              "type": "array",
-              "items": {
-                "type": "string"
-              }
-            },
-            {
-              "name": "appearance",
-              "description": "Stores the external appearance description of the device.",
-              "optional": true,
-              "type": "integer"
-            },
-            {
-              "name": "txPower",
-              "description": "Stores the transmission power of a broadcasting device.",
-              "optional": true,
-              "type": "integer"
-            },
-            {
-              "name": "manufacturerData",
-              "description": "Key is the company identifier and the value is an array of bytes of\nmanufacturer specific data.",
-              "optional": true,
-              "type": "array",
-              "items": {
-                "$ref": "ManufacturerData"
-              }
-            }
-          ]
-        },
-        {
-          "id": "ScanEntry",
-          "description": "Stores the advertisement packet information that is sent by a Bluetooth device.",
-          "type": "object",
-          "properties": [
-            {
-              "name": "deviceAddress",
-              "type": "string"
-            },
-            {
-              "name": "rssi",
-              "type": "integer"
-            },
-            {
-              "name": "scanRecord",
-              "$ref": "ScanRecord"
-            }
-          ]
-        },
-        {
-          "id": "CharacteristicProperties",
-          "description": "Describes the properties of a characteristic. This follows Bluetooth Core\nSpecification BT 4.2 Vol 3 Part G 3.3.1. Characteristic Properties.",
-          "type": "object",
-          "properties": [
-            {
-              "name": "broadcast",
-              "optional": true,
-              "type": "boolean"
-            },
-            {
-              "name": "read",
-              "optional": true,
-              "type": "boolean"
-            },
-            {
-              "name": "writeWithoutResponse",
-              "optional": true,
-              "type": "boolean"
-            },
-            {
-              "name": "write",
-              "optional": true,
-              "type": "boolean"
-            },
-            {
-              "name": "notify",
-              "optional": true,
-              "type": "boolean"
-            },
-            {
-              "name": "indicate",
-              "optional": true,
-              "type": "boolean"
-            },
-            {
-              "name": "authenticatedSignedWrites",
-              "optional": true,
-              "type": "boolean"
-            },
-            {
-              "name": "extendedProperties",
-              "optional": true,
-              "type": "boolean"
-            }
-          ]
-        }
-      ],
-      "commands": [
-        {
-          "name": "enable",
-          "description": "Enable the BluetoothEmulation domain.",
-          "parameters": [
-            {
-              "name": "state",
-              "description": "State of the simulated central.",
-              "$ref": "CentralState"
-            },
-            {
-              "name": "leSupported",
-              "description": "If the simulated central supports low-energy.",
-              "type": "boolean"
-            }
-          ]
-        },
-        {
-          "name": "setSimulatedCentralState",
-          "description": "Set the state of the simulated central.",
-          "parameters": [
-            {
-              "name": "state",
-              "description": "State of the simulated central.",
-              "$ref": "CentralState"
-            }
-          ]
-        },
-        {
-          "name": "disable",
-          "description": "Disable the BluetoothEmulation domain."
-        },
-        {
-          "name": "simulatePreconnectedPeripheral",
-          "description": "Simulates a peripheral with |address|, |name| and |knownServiceUuids|\nthat has already been connected to the system.",
-          "parameters": [
-            {
-              "name": "address",
-              "type": "string"
-            },
-            {
-              "name": "name",
-              "type": "string"
-            },
-            {
-              "name": "manufacturerData",
-              "type": "array",
-              "items": {
-                "$ref": "ManufacturerData"
-              }
-            },
-            {
-              "name": "knownServiceUuids",
-              "type": "array",
-              "items": {
-                "type": "string"
-              }
-            }
-          ]
-        },
-        {
-          "name": "simulateAdvertisement",
-          "description": "Simulates an advertisement packet described in |entry| being received by\nthe central.",
-          "parameters": [
-            {
-              "name": "entry",
-              "$ref": "ScanEntry"
-            }
-          ]
-        },
-        {
-          "name": "simulateGATTOperationResponse",
-          "description": "Simulates the response code from the peripheral with |address| for a\nGATT operation of |type|. The |code| value follows the HCI Error Codes from\nBluetooth Core Specification Vol 2 Part D 1.3 List Of Error Codes.",
-          "parameters": [
-            {
-              "name": "address",
-              "type": "string"
-            },
-            {
-              "name": "type",
-              "$ref": "GATTOperationType"
-            },
-            {
-              "name": "code",
-              "type": "integer"
-            }
-          ]
-        },
-        {
-          "name": "simulateCharacteristicOperationResponse",
-          "description": "Simulates the response from the characteristic with |characteristicId| for a\ncharacteristic operation of |type|. The |code| value follows the Error\nCodes from Bluetooth Core Specification Vol 3 Part F 3.4.1.1 Error Response.\nThe |data| is expected to exist when simulating a successful read operation\nresponse.",
-          "parameters": [
-            {
-              "name": "characteristicId",
-              "type": "string"
-            },
-            {
-              "name": "type",
-              "$ref": "CharacteristicOperationType"
-            },
-            {
-              "name": "code",
-              "type": "integer"
-            },
-            {
-              "name": "data",
-              "optional": true,
-              "type": "binary"
-            }
-          ]
-        },
-        {
-          "name": "simulateDescriptorOperationResponse",
-          "description": "Simulates the response from the descriptor with |descriptorId| for a\ndescriptor operation of |type|. The |code| value follows the Error\nCodes from Bluetooth Core Specification Vol 3 Part F 3.4.1.1 Error Response.\nThe |data| is expected to exist when simulating a successful read operation\nresponse.",
-          "parameters": [
-            {
-              "name": "descriptorId",
-              "type": "string"
-            },
-            {
-              "name": "type",
-              "$ref": "DescriptorOperationType"
-            },
-            {
-              "name": "code",
-              "type": "integer"
-            },
-            {
-              "name": "data",
-              "optional": true,
-              "type": "binary"
-            }
-          ]
-        },
-        {
-          "name": "addService",
-          "description": "Adds a service with |serviceUuid| to the peripheral with |address|.",
-          "parameters": [
-            {
-              "name": "address",
-              "type": "string"
-            },
-            {
-              "name": "serviceUuid",
-              "type": "string"
-            }
-          ],
-          "returns": [
-            {
-              "name": "serviceId",
-              "description": "An identifier that uniquely represents this service.",
-              "type": "string"
-            }
-          ]
-        },
-        {
-          "name": "removeService",
-          "description": "Removes the service respresented by |serviceId| from the simulated central.",
-          "parameters": [
-            {
-              "name": "serviceId",
-              "type": "string"
-            }
-          ]
-        },
-        {
-          "name": "addCharacteristic",
-          "description": "Adds a characteristic with |characteristicUuid| and |properties| to the\nservice represented by |serviceId|.",
-          "parameters": [
-            {
-              "name": "serviceId",
-              "type": "string"
-            },
-            {
-              "name": "characteristicUuid",
-              "type": "string"
-            },
-            {
-              "name": "properties",
-              "$ref": "CharacteristicProperties"
-            }
-          ],
-          "returns": [
-            {
-              "name": "characteristicId",
-              "description": "An identifier that uniquely represents this characteristic.",
-              "type": "string"
-            }
-          ]
-        },
-        {
-          "name": "removeCharacteristic",
-          "description": "Removes the characteristic respresented by |characteristicId| from the\nsimulated central.",
-          "parameters": [
-            {
-              "name": "characteristicId",
-              "type": "string"
-            }
-          ]
-        },
-        {
-          "name": "addDescriptor",
-          "description": "Adds a descriptor with |descriptorUuid| to the characteristic respresented\nby |characteristicId|.",
-          "parameters": [
-            {
-              "name": "characteristicId",
-              "type": "string"
-            },
-            {
-              "name": "descriptorUuid",
-              "type": "string"
-            }
-          ],
-          "returns": [
-            {
-              "name": "descriptorId",
-              "description": "An identifier that uniquely represents this descriptor.",
-              "type": "string"
-            }
-          ]
-        },
-        {
-          "name": "removeDescriptor",
-          "description": "Removes the descriptor with |descriptorId| from the simulated central.",
-          "parameters": [
-            {
-              "name": "descriptorId",
-              "type": "string"
-            }
-          ]
-        },
-        {
-          "name": "simulateGATTDisconnection",
-          "description": "Simulates a GATT disconnection from the peripheral with |address|.",
-          "parameters": [
-            {
-              "name": "address",
-              "type": "string"
-            }
-          ]
-        }
-      ],
-      "events": [
-        {
-          "name": "gattOperationReceived",
-          "description": "Event for when a GATT operation of |type| to the peripheral with |address|\nhappened.",
-          "parameters": [
-            {
-              "name": "address",
-              "type": "string"
-            },
-            {
-              "name": "type",
-              "$ref": "GATTOperationType"
-            }
-          ]
-        },
-        {
-          "name": "characteristicOperationReceived",
-          "description": "Event for when a characteristic operation of |type| to the characteristic\nrespresented by |characteristicId| happened. |data| and |writeType| is\nexpected to exist when |type| is write.",
-          "parameters": [
-            {
-              "name": "characteristicId",
-              "type": "string"
-            },
-            {
-              "name": "type",
-              "$ref": "CharacteristicOperationType"
-            },
-            {
-              "name": "data",
-              "optional": true,
-              "type": "binary"
-            },
-            {
-              "name": "writeType",
-              "optional": true,
-              "$ref": "CharacteristicWriteType"
-            }
-          ]
-        },
-        {
-          "name": "descriptorOperationReceived",
-          "description": "Event for when a descriptor operation of |type| to the descriptor\nrespresented by |descriptorId| happened. |data| is expected to exist when\n|type| is write.",
-          "parameters": [
-            {
-              "name": "descriptorId",
-              "type": "string"
-            },
-            {
-              "name": "type",
-              "$ref": "DescriptorOperationType"
-            },
-            {
-              "name": "data",
-              "optional": true,
-              "type": "binary"
-            }
-          ]
-        }
       ]
     },
     {
